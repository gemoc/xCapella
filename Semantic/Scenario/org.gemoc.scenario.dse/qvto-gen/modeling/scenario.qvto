import org.eclipse.gemoc.moccml_mapping.EclQVToHelper;
modeltype Ecore uses 'http://www.eclipse.org/emf/2002/Ecore';
	modeltype inMM1 uses 'http://www.polarsys.org/capella/core/modeller/1.3.0';
	modeltype inMM2 uses 'http://www.polarsys.org/capella/core/ctx/1.3.0';
	modeltype inMM3 uses 'http://www.polarsys.org/capella/core/interaction/1.3.0';
	modeltype inMM4 uses 'http://www.polarsys.org/capella/core/ctx/1.3.0';

modeltype QVT 		uses 'http://www.eclipse.org/QVT/1.0.0/Operational';
modeltype TimeModel uses 'http://fr.inria.aoste.timemodel';
modeltype FeedBack 	uses 'http://timesquare.inria.fr/feedback';
modeltype Priority  uses 'http://fr.inria.aoste.timesquare.ccslkernel.solver.priorities';


transformation docapellamodeller_To_CCSL(in inM : inMM1, out ccsl : TimeModel, out feedback : FeedBack, out priority: Priority);

property thePrioritySpec		:Priority::PrioritySpecification = null;
property theFeedBackSpec		:FeedBack::ActionModel = null;
property seqOfMSE :	Sequence(FeedBack::ModelSpecificEvent)    = Sequence{};
property theCCSLSpec			:TimeModel::CCSLModel::ClockConstraintSystem = null;
property theMainBlock			:TimeModel::CCSLModel::Block				 = null;
property Kernel_Integer 	: TimeModel::BasicType::Type		= null;
property Kernel_Clock_Type 	: TimeModel::BasicType::Type		= null;
property seqOfRelationDeclaration :	Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration)    = Sequence{};
property seqOfAbstractEntity :		Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)    = Sequence{};
property seqOfExpressionDeclaration :	Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration)    = Sequence{};
property allVarDefs : Sequence(String) = Sequence{}; 

query identifyUserRelations() {
	var kernelTypes :  	Sequence(TimeModel::BasicType::Type) := Sequence{};
	seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
	seqOfAbstractEntity				+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
	seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
	kernelTypes 					+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::BasicType::Type];
	seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
	seqOfAbstractEntity				+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
	seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
	kernelTypes 					+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::BasicType::Type];
	seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/org.gemoc.scenario.mocc/mocc/lib4RT.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
	seqOfAbstractEntity				+= getLibObjects("platform:/plugin/org.gemoc.scenario.mocc/mocc/lib4RT.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
	seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/org.gemoc.scenario.mocc/mocc/lib4RT.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
	kernelTypes 					+= getLibObjects("platform:/plugin/org.gemoc.scenario.mocc/mocc/lib4RT.ccslLib")[TimeModel::BasicType::Type];
	seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/org.gemoc.scenario.mocc/mocc/temporalConstraints.moccml")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
	seqOfAbstractEntity				+= getLibObjects("platform:/plugin/org.gemoc.scenario.mocc/mocc/temporalConstraints.moccml")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
	seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/org.gemoc.scenario.mocc/mocc/temporalConstraints.moccml")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
	kernelTypes 					+= getLibObjects("platform:/plugin/org.gemoc.scenario.mocc/mocc/temporalConstraints.moccml")[TimeModel::BasicType::Type];

	Kernel_Integer 					:= kernelTypes[name='int']->asSequence()->first();
	Kernel_Clock_Type				:= kernelTypes[name='clock']->asSequence()->first();	
	return;
}


//usefull function :)
	mapping Real::Real2Integer(n: String) :TimeModel::BasicType::IntegerElement {
		name:= n;
		type:= Kernel_Integer;
		value := self.round();

		end{
			theMainBlock.elements += result;
		}
	}

main() {
	identifyUserRelations();
	inM.rootObjects()[inMM1::Project]->asSequence()->first()-> map capellamodeller2CCSL();
	inM.rootObjects()[inMM1::Project]->asSequence()->first()-> map capellamodeller2FeedBack();
	inM.rootObjects()[inMM1::Project]->asSequence()->first()-> map capellamodeller2Priority();
}

			
	mapping inMM1::Project::capellamodeller2CCSL() : TimeModel::CCSLModel::ClockConstraintSystem {
	    theCCSLSpec := result;
	    name := getNameOrUID(self.oclAsType(EObject));
	    theMainBlock :=object TimeModel::CCSLModel::Block{
	    	name := "mainBlock";
	    };
	    subBlock += theMainBlock;
	    result.superBlock := theMainBlock;
		
		var anEmptyBlock :=object TimeModel::CCSLModel::Block{
	    	name := "emptyBlock";
	    };
	    subBlock += anEmptyBlock;
		
		imports+= object TimeModel::ImportStatement{
			importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib';
			alias := 'kernel';
			
		}; 
		imports+= object TimeModel::ImportStatement{
			importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib';
			alias := 'CCSL';
			
		}; 
		imports+= object TimeModel::ImportStatement{
			importURI := 'platform:/plugin/org.gemoc.scenario.mocc/mocc/lib4RT.ccslLib';
			alias := 'lib4RT';
			
		}; 
		imports+= object TimeModel::ImportStatement{
			importURI := 'platform:/plugin/org.gemoc.scenario.mocc/mocc/temporalConstraints.moccml';
			alias := 'temporalConstraints';
			
		}; 
	
		imports+= object TimeModel::ImportStatement{
			importURI := getModelPath(inM.rootObjects()->asSequence()->first().oclAsType(EObject));
			alias := getModelAlias(inM.rootObjects()->asSequence()->first().oclAsType(EObject));
			
		};
		imports+= object TimeModel::ImportStatement{
			importURI := getModelPath(inM.rootObjects()->asSequence()->first().oclAsType(EObject));
			alias := getModelAlias(inM.rootObjects()->asSequence()->first().oclAsType(EObject));
			
		};
		imports+= object TimeModel::ImportStatement{
			importURI := getModelPath(inM.rootObjects()->asSequence()->first().oclAsType(EObject));
			alias := getModelAlias(inM.rootObjects()->asSequence()->first().oclAsType(EObject));
			
		};
		imports+= object TimeModel::ImportStatement{
			importURI := getModelPath(inM.rootObjects()->asSequence()->first().oclAsType(EObject));
			alias := getModelAlias(inM.rootObjects()->asSequence()->first().oclAsType(EObject));
			
		};
		imports+= object TimeModel::ImportStatement{
			importURI := getModelPath(inM.rootObjects()->asSequence()->first().oclAsType(EObject));
			alias := getModelAlias(inM.rootObjects()->asSequence()->first().oclAsType(EObject));
			
		};

		

		////[ SystemFunction ]
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map ACTIVATED2Clock();
		////[ SystemFunction ]
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map STARTED2Clock();
		////[ SystemFunction ]
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map TERMINATED2Clock();
		////[ SystemFunction ]
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map SUSPENDED2Clock();
		////[ SystemFunction ]
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map unsuspend2Clock();
		////[ SystemFunction ]
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map isRunning2Clock();
		////[ SystemFunction ]
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map hasBeenElected2Clock();
		


		

		////[ System ]
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), System.oclAsType(EClass)).oclAsType(System)->map isWorking2Clock();
		


		

		////[ SystemAnalysis ]
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemAnalysis.oclAsType(EClass)).oclAsType(SystemAnalysis)->map ms2Clock();
		


		

		////[ MessageEnd ]
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), MessageEnd.oclAsType(EClass)).oclAsType(MessageEnd)->map messEnd_occurs2Clock();
		


		

		////[ ExecutionEnd ]
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), ExecutionEnd.oclAsType(EClass)).oclAsType(ExecutionEnd)->map execEnd_occurs2Clock();
		


		

		////[ AbstractEnd ]
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), AbstractEnd.oclAsType(EClass)).oclAsType(AbstractEnd)->map abstractEnd_occurs2Clock();
		


		

		


		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), InstanceRole.oclAsType(EClass)).oclAsType(InstanceRole)->map endsInOrder12endsInOrder();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), InstanceRole.oclAsType(EClass)).oclAsType(InstanceRole)->map nonRentrantSCenario32nonRentrantSCenario();
		
		

		


		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SequenceMessage.oclAsType(EClass)).oclAsType(SequenceMessage)->map instantaneousReply32instantaneousReply();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SequenceMessage.oclAsType(EClass)).oclAsType(SequenceMessage)->map causalityCall32causalityCall();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SequenceMessage.oclAsType(EClass)).oclAsType(SequenceMessage)->map sendMeansActivates32sendMeansActivates();
		
		

		


		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), MessageEnd.oclAsType(EClass)).oclAsType(MessageEnd)->map messIsAbst12messIsAbst();
		
		

		


		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), ExecutionEnd.oclAsType(EClass)).oclAsType(ExecutionEnd)->map execIsAbst12execIsAbst();
		
		

		


		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), Execution.oclAsType(EClass)).oclAsType(Execution)->map eitherElectedXORmessageOccured12eitherElectedXORmessageOccured();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), Execution.oclAsType(EClass)).oclAsType(Execution)->map startedOrrElectedMeansStarts32startedOrrElectedMeansStarts();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), Execution.oclAsType(EClass)).oclAsType(Execution)->map stopWhenEndOccurs12stopWhenEndOccurs();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), Execution.oclAsType(EClass)).oclAsType(Execution)->map startBeforeFinish_nonRentrant12startBeforeFinish_nonRentrant();
		
		

		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), ConstraintDuration.oclAsType(EClass)).oclAsType(ConstraintDuration)->map isPeriodic2Integer();
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), ConstraintDuration.oclAsType(EClass)).oclAsType(ConstraintDuration)->map firstValue2Integer();
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), ConstraintDuration.oclAsType(EClass)).oclAsType(ConstraintDuration)->map secondValue2Integer();
		


		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), ConstraintDuration.oclAsType(EClass)).oclAsType(ConstraintDuration)->map DurationAsAPeriodic32DurationAsAPeriodic();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), ConstraintDuration.oclAsType(EClass)).oclAsType(ConstraintDuration)->map DurationOfAllocatedExec32DurationOfAllocatedExec();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), ConstraintDuration.oclAsType(EClass)).oclAsType(ConstraintDuration)->map DurationOfNonAllocatedExec32DurationOfNonAllocatedExec();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), ConstraintDuration.oclAsType(EClass)).oclAsType(ConstraintDuration)->map DurationOfZero32DurationOfZero();
		
		

		


		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), System.oclAsType(EClass)).oclAsType(System)->map nonPreemptiveSched_part232nonPreemptiveSched_part2();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), System.oclAsType(EClass)).oclAsType(System)->map isWorkingIfATaskIsRunning32isWorkingIfATaskIsRunning();
		
		

		


		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map unsuspendBeforeElection32unsuspendBeforeElection();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map taskTaskInv32taskTaskInv();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map isRunningTakesTime32isRunningTakesTime();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map SuspendIfAnotherStartOnSameCPUOrSendSynchCall72SuspendIfAnotherStartOnSameCPUOrSendSynchCall();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map SuspendIfAnotherStartOnSameCPU52SuspendIfAnotherStartOnSameCPU();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map SuspendIfSendSynchCall52SuspendIfSendSynchCall();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map NeverSuspend32NeverSuspend();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map UnSuspendIfAnotherTerminateOnSameCPUorReceiveSynchCall82UnSuspendIfAnotherTerminateOnSameCPUorReceiveSynchCall();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map UnSuspendIfAnotherTerminateOnSameCPU42UnSuspendIfAnotherTerminateOnSameCPU();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map UnSuspendIfReceiveSynchCall42UnSuspendIfReceiveSynchCall();
		
		
		getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map NeverUnsuspend32NeverUnsuspend();
		
	}





//create the expressions...

	mapping inMM3::Execution::startedOrElected2Expression():TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		name := getNameOrUID(self.oclAsType(EObject))+'_Union_startedOrElected';
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();
				-- ICI
		

				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.covered.representedInstance.oclAsType(ctx::SystemFunction).oclAsType(EObject))+'_hasBeenElected']->first();
				//	var size : Integer = seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence()->size()+1;
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.start.oclAsType(AbstractEnd).oclAsType(EObject))+'_abstractEnd_occurs']->first();
				//	var size : Integer = seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence()->size()+1;
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}

	
	
//Create an intermediate expression
//create the expressions... 
	mapping inMM4::System::intermediate_aTaskIsRunning2Expression(an1 : SystemFunction, an2 : SystemFunction, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{ 
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_aTaskIsRunning'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
		


				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
		 			bindable := theMainBlock.elements[name = getNameOrUID(an1.oclAsType(EObject))+'_isRunning']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an2.oclAsType(EObject))+'_isRunning']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}

	mapping inMM4::System::intermediate_aTaskIsRunning2Expression(expr :TimeModel::CCSLModel::ClockExpressionAndRelation::Expression , an : SystemFunction, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_aTaskIsRunning'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.expressions[name = expr.name]->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an.oclAsType(EObject))+'_isRunning']->first();
					
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}
	
	mapping inMM4::System::aTaskIsRunning2Expression():TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		init{

	

				-- ICI
		

		var sources : Sequence(SystemFunction) := self.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->asSequence();
		var lastExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression :=null;
		var i : Integer := 3;
		var newExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression := lastExpr;
		var size : Integer = sources->size(); 
		if(size = 1)then{
			result := self.map intermediate_aTaskIsRunning2Expression(sources->at(1),sources->at(1), 1);
		}else{
			lastExpr := self.map intermediate_aTaskIsRunning2Expression(sources->at(1),sources->at(2), 1);
			while (i <= size){
				newExpr := self.map intermediate_aTaskIsRunning2Expression(lastExpr,sources->at(i), i);
				lastExpr := newExpr;
				i := i + 1;
			};
			result := lastExpr;
		}
		endif;
		}
		
		end{
			theMainBlock.expressions += result;
		}
	}


	mapping inMM4::SystemFunction::allowers2Expression():TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		name := getNameOrUID(self.oclAsType(EObject))+'_Union_allowers';
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();
				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		

				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_STARTED']->first();
				//	var size : Integer = seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence()->size()+1;
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_unsuspend']->first();
				//	var size : Integer = seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence()->size()+1;
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}

	mapping inMM4::SystemFunction::allSuspenders2Expression():TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		name := getNameOrUID(self.oclAsType(EObject))+'_Union_allSuspenders';
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();
				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		

				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := self -> map allOtherStarts2Expression()->asSequence()->first();
				//	var size : Integer = seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence()->size()+1;
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := self -> map allSynchronousCalls2Expression()->asSequence()->first();
				//	var size : Integer = seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence()->size()+1;
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}

	
	
//Create an intermediate expression
//create the expressions... 
	mapping inMM4::SystemFunction::intermediate_allSynchronousCalls2Expression(an1 : MessageEnd, an2 : MessageEnd, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{ 
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_allSynchronousCalls'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		


				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
		 			bindable := theMainBlock.elements[name = getNameOrUID(an1.oclAsType(EObject))+'_messEnd_occurs']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an2.oclAsType(EObject))+'_messEnd_occurs']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}

	mapping inMM4::SystemFunction::intermediate_allSynchronousCalls2Expression(expr :TimeModel::CCSLModel::ClockExpressionAndRelation::Expression , an : MessageEnd, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_allSynchronousCalls'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.expressions[name = expr.name]->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an.oclAsType(EObject))+'_messEnd_occurs']->first();
					
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}
	
	mapping inMM4::SystemFunction::allSynchronousCalls2Expression():TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		init{

	

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		

		var sources : Sequence(MessageEnd) := allSynchCallSet.sendingEnd->asSequence();
		var lastExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression :=null;
		var i : Integer := 3;
		var newExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression := lastExpr;
		var size : Integer = sources->size(); 
		if(size = 1)then{
			result := self.map intermediate_allSynchronousCalls2Expression(sources->at(1),sources->at(1), 1);
		}else{
			lastExpr := self.map intermediate_allSynchronousCalls2Expression(sources->at(1),sources->at(2), 1);
			while (i <= size){
				newExpr := self.map intermediate_allSynchronousCalls2Expression(lastExpr,sources->at(i), i);
				lastExpr := newExpr;
				i := i + 1;
			};
			result := lastExpr;
		}
		endif;
		}
		
		end{
			theMainBlock.expressions += result;
		}
	}


	
	
//Create an intermediate expression
//create the expressions... 
	mapping inMM4::SystemFunction::intermediate_allOtherStarts2Expression(an1 : SystemFunction, an2 : SystemFunction, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{ 
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_allOtherStarts'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		


				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
		 			bindable := theMainBlock.elements[name = getNameOrUID(an1.oclAsType(EObject))+'_STARTED']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an2.oclAsType(EObject))+'_STARTED']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}

	mapping inMM4::SystemFunction::intermediate_allOtherStarts2Expression(expr :TimeModel::CCSLModel::ClockExpressionAndRelation::Expression , an : SystemFunction, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_allOtherStarts'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.expressions[name = expr.name]->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an.oclAsType(EObject))+'_STARTED']->first();
					
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}
	
	mapping inMM4::SystemFunction::allOtherStarts2Expression():TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		init{

	

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		

		var sources : Sequence(SystemFunction) := otherTasks->asSequence();
		var lastExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression :=null;
		var i : Integer := 3;
		var newExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression := lastExpr;
		var size : Integer = sources->size(); 
		if(size = 1)then{
			result := self.map intermediate_allOtherStarts2Expression(sources->at(1),sources->at(1), 1);
		}else{
			lastExpr := self.map intermediate_allOtherStarts2Expression(sources->at(1),sources->at(2), 1);
			while (i <= size){
				newExpr := self.map intermediate_allOtherStarts2Expression(lastExpr,sources->at(i), i);
				lastExpr := newExpr;
				i := i + 1;
			};
			result := lastExpr;
		}
		endif;
		}
		
		end{
			theMainBlock.expressions += result;
		}
	}


	mapping inMM4::SystemFunction::allowers22Expression():TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		name := getNameOrUID(self.oclAsType(EObject))+'_Union_allowers2';
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();
				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		

				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_STARTED']->first();
				//	var size : Integer = seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence()->size()+1;
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_unsuspend']->first();
				//	var size : Integer = seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence()->size()+1;
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}

	
	
//Create an intermediate expression
//create the expressions... 
	mapping inMM4::SystemFunction::intermediate_allOtherStarts22Expression(an1 : SystemFunction, an2 : SystemFunction, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{ 
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_allOtherStarts2'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		


				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
		 			bindable := theMainBlock.elements[name = getNameOrUID(an1.oclAsType(EObject))+'_STARTED']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an2.oclAsType(EObject))+'_STARTED']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}

	mapping inMM4::SystemFunction::intermediate_allOtherStarts22Expression(expr :TimeModel::CCSLModel::ClockExpressionAndRelation::Expression , an : SystemFunction, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_allOtherStarts2'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.expressions[name = expr.name]->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an.oclAsType(EObject))+'_STARTED']->first();
					
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}
	
	mapping inMM4::SystemFunction::allOtherStarts22Expression():TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		init{

	

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		

		var sources : Sequence(SystemFunction) := otherTasks->asSequence();
		var lastExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression :=null;
		var i : Integer := 3;
		var newExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression := lastExpr;
		var size : Integer = sources->size(); 
		if(size = 1)then{
			result := self.map intermediate_allOtherStarts22Expression(sources->at(1),sources->at(1), 1);
		}else{
			lastExpr := self.map intermediate_allOtherStarts22Expression(sources->at(1),sources->at(2), 1);
			while (i <= size){
				newExpr := self.map intermediate_allOtherStarts22Expression(lastExpr,sources->at(i), i);
				lastExpr := newExpr;
				i := i + 1;
			};
			result := lastExpr;
		}
		endif;
		}
		
		end{
			theMainBlock.expressions += result;
		}
	}


	mapping inMM4::SystemFunction::allowers32Expression():TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		name := getNameOrUID(self.oclAsType(EObject))+'_Union_allowers3';
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();
				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		

				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_STARTED']->first();
				//	var size : Integer = seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence()->size()+1;
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_unsuspend']->first();
				//	var size : Integer = seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence()->size()+1;
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}

	
	
//Create an intermediate expression
//create the expressions... 
	mapping inMM4::SystemFunction::intermediate_allSynchronousCalls32Expression(an1 : MessageEnd, an2 : MessageEnd, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{ 
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_allSynchronousCalls3'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		


				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
		 			bindable := theMainBlock.elements[name = getNameOrUID(an1.oclAsType(EObject))+'_messEnd_occurs']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an2.oclAsType(EObject))+'_messEnd_occurs']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}

	mapping inMM4::SystemFunction::intermediate_allSynchronousCalls32Expression(expr :TimeModel::CCSLModel::ClockExpressionAndRelation::Expression , an : MessageEnd, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_allSynchronousCalls3'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.expressions[name = expr.name]->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an.oclAsType(EObject))+'_messEnd_occurs']->first();
					
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}
	
	mapping inMM4::SystemFunction::allSynchronousCalls32Expression():TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		init{

	

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		

		var sources : Sequence(MessageEnd) := allSynchCallSet.sendingEnd->asSequence();
		var lastExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression :=null;
		var i : Integer := 3;
		var newExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression := lastExpr;
		var size : Integer = sources->size(); 
		if(size = 1)then{
			result := self.map intermediate_allSynchronousCalls32Expression(sources->at(1),sources->at(1), 1);
		}else{
			lastExpr := self.map intermediate_allSynchronousCalls32Expression(sources->at(1),sources->at(2), 1);
			while (i <= size){
				newExpr := self.map intermediate_allSynchronousCalls32Expression(lastExpr,sources->at(i), i);
				lastExpr := newExpr;
				i := i + 1;
			};
			result := lastExpr;
		}
		endif;
		}
		
		end{
			theMainBlock.expressions += result;
		}
	}


	mapping inMM4::SystemFunction::allUnSuspenders2Expression():TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		name := getNameOrUID(self.oclAsType(EObject))+'_Union_allUnSuspenders';
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();
				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		

				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := self -> map allOtherTerminated2Expression()->asSequence()->first();
				//	var size : Integer = seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence()->size()+1;
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := self -> map allSynchronousReceiveCalls2Expression()->asSequence()->first();
				//	var size : Integer = seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence()->size()+1;
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}

	
	
//Create an intermediate expression
//create the expressions... 
	mapping inMM4::SystemFunction::intermediate_allSynchronousReceiveCalls2Expression(an1 : MessageEnd, an2 : MessageEnd, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{ 
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_allSynchronousReceiveCalls'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		


				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
		 			bindable := theMainBlock.elements[name = getNameOrUID(an1.oclAsType(EObject))+'_messEnd_occurs']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an2.oclAsType(EObject))+'_messEnd_occurs']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}

	mapping inMM4::SystemFunction::intermediate_allSynchronousReceiveCalls2Expression(expr :TimeModel::CCSLModel::ClockExpressionAndRelation::Expression , an : MessageEnd, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_allSynchronousReceiveCalls'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.expressions[name = expr.name]->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an.oclAsType(EObject))+'_messEnd_occurs']->first();
					
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}
	
	mapping inMM4::SystemFunction::allSynchronousReceiveCalls2Expression():TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		init{

	

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		

		var sources : Sequence(MessageEnd) := allReplySet.receivingEnd->asSequence();
		var lastExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression :=null;
		var i : Integer := 3;
		var newExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression := lastExpr;
		var size : Integer = sources->size(); 
		if(size = 1)then{
			result := self.map intermediate_allSynchronousReceiveCalls2Expression(sources->at(1),sources->at(1), 1);
		}else{
			lastExpr := self.map intermediate_allSynchronousReceiveCalls2Expression(sources->at(1),sources->at(2), 1);
			while (i <= size){
				newExpr := self.map intermediate_allSynchronousReceiveCalls2Expression(lastExpr,sources->at(i), i);
				lastExpr := newExpr;
				i := i + 1;
			};
			result := lastExpr;
		}
		endif;
		}
		
		end{
			theMainBlock.expressions += result;
		}
	}


	mapping inMM4::SystemFunction::allOtherTerminatedOrUnsuspend2Expression():TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		name := getNameOrUID(self.oclAsType(EObject))+'_Union_allOtherTerminatedOrUnsuspend';
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();
				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		

				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := self -> map allOtherTerminated2Expression()->asSequence()->first();
				//	var size : Integer = seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence()->size()+1;
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := self -> map allOtherSuspend2Expression()->asSequence()->first();
				//	var size : Integer = seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence()->size()+1;
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}

	
	
//Create an intermediate expression
//create the expressions... 
	mapping inMM4::SystemFunction::intermediate_allOtherSuspend2Expression(an1 : SystemFunction, an2 : SystemFunction, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{ 
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_allOtherSuspend'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		


				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
		 			bindable := theMainBlock.elements[name = getNameOrUID(an1.oclAsType(EObject))+'_SUSPENDED']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an2.oclAsType(EObject))+'_SUSPENDED']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}

	mapping inMM4::SystemFunction::intermediate_allOtherSuspend2Expression(expr :TimeModel::CCSLModel::ClockExpressionAndRelation::Expression , an : SystemFunction, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_allOtherSuspend'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.expressions[name = expr.name]->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an.oclAsType(EObject))+'_SUSPENDED']->first();
					
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}
	
	mapping inMM4::SystemFunction::allOtherSuspend2Expression():TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		init{

	

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		

		var sources : Sequence(SystemFunction) := otherTasks->asSequence();
		var lastExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression :=null;
		var i : Integer := 3;
		var newExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression := lastExpr;
		var size : Integer = sources->size(); 
		if(size = 1)then{
			result := self.map intermediate_allOtherSuspend2Expression(sources->at(1),sources->at(1), 1);
		}else{
			lastExpr := self.map intermediate_allOtherSuspend2Expression(sources->at(1),sources->at(2), 1);
			while (i <= size){
				newExpr := self.map intermediate_allOtherSuspend2Expression(lastExpr,sources->at(i), i);
				lastExpr := newExpr;
				i := i + 1;
			};
			result := lastExpr;
		}
		endif;
		}
		
		end{
			theMainBlock.expressions += result;
		}
	}


	
	
//Create an intermediate expression
//create the expressions... 
	mapping inMM4::SystemFunction::intermediate_allOtherTerminated2Expression(an1 : SystemFunction, an2 : SystemFunction, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{ 
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_allOtherTerminated'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		


				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
		 			bindable := theMainBlock.elements[name = getNameOrUID(an1.oclAsType(EObject))+'_TERMINATED']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an2.oclAsType(EObject))+'_TERMINATED']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}

	mapping inMM4::SystemFunction::intermediate_allOtherTerminated2Expression(expr :TimeModel::CCSLModel::ClockExpressionAndRelation::Expression , an : SystemFunction, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_allOtherTerminated'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.expressions[name = expr.name]->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an.oclAsType(EObject))+'_TERMINATED']->first();
					
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}
	
	mapping inMM4::SystemFunction::allOtherTerminated2Expression():TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		init{

	

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		

		var sources : Sequence(SystemFunction) := otherTasks->asSequence();
		var lastExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression :=null;
		var i : Integer := 3;
		var newExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression := lastExpr;
		var size : Integer = sources->size(); 
		if(size = 1)then{
			result := self.map intermediate_allOtherTerminated2Expression(sources->at(1),sources->at(1), 1);
		}else{
			lastExpr := self.map intermediate_allOtherTerminated2Expression(sources->at(1),sources->at(2), 1);
			while (i <= size){
				newExpr := self.map intermediate_allOtherTerminated2Expression(lastExpr,sources->at(i), i);
				lastExpr := newExpr;
				i := i + 1;
			};
			result := lastExpr;
		}
		endif;
		}
		
		end{
			theMainBlock.expressions += result;
		}
	}


	
	
//Create an intermediate expression
//create the expressions... 
	mapping inMM4::SystemFunction::intermediate_allOtherTerminated22Expression(an1 : SystemFunction, an2 : SystemFunction, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{ 
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_allOtherTerminated2'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		


				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
		 			bindable := theMainBlock.elements[name = getNameOrUID(an1.oclAsType(EObject))+'_TERMINATED']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an2.oclAsType(EObject))+'_TERMINATED']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}

	mapping inMM4::SystemFunction::intermediate_allOtherTerminated22Expression(expr :TimeModel::CCSLModel::ClockExpressionAndRelation::Expression , an : SystemFunction, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_allOtherTerminated2'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.expressions[name = expr.name]->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an.oclAsType(EObject))+'_TERMINATED']->first();
					
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}
	
	mapping inMM4::SystemFunction::allOtherTerminated22Expression():TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		init{

	

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		

		var sources : Sequence(SystemFunction) := otherTasks->asSequence();
		var lastExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression :=null;
		var i : Integer := 3;
		var newExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression := lastExpr;
		var size : Integer = sources->size(); 
		if(size = 1)then{
			result := self.map intermediate_allOtherTerminated22Expression(sources->at(1),sources->at(1), 1);
		}else{
			lastExpr := self.map intermediate_allOtherTerminated22Expression(sources->at(1),sources->at(2), 1);
			while (i <= size){
				newExpr := self.map intermediate_allOtherTerminated22Expression(lastExpr,sources->at(i), i);
				lastExpr := newExpr;
				i := i + 1;
			};
			result := lastExpr;
		}
		endif;
		}
		
		end{
			theMainBlock.expressions += result;
		}
	}


	
	
//Create an intermediate expression
//create the expressions... 
	mapping inMM4::SystemFunction::intermediate_allSynchronousReceiveCalls22Expression(an1 : MessageEnd, an2 : MessageEnd, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{ 
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_allSynchronousReceiveCalls2'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		


				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
		 			bindable := theMainBlock.elements[name = getNameOrUID(an1.oclAsType(EObject))+'_messEnd_occurs']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an2.oclAsType(EObject))+'_messEnd_occurs']->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}

	mapping inMM4::SystemFunction::intermediate_allSynchronousReceiveCalls22Expression(expr :TimeModel::CCSLModel::ClockExpressionAndRelation::Expression , an : MessageEnd, nb : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_allSynchronousReceiveCalls2'+nb.toString();
		type := seqOfExpressionDeclaration->select(rd | rd.name = "Union")->first();

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.expressions[name = expr.name]->first();
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an.oclAsType(EObject))+'_messEnd_occurs']->first();
					
					var seqAbstract : Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity) := seqOfExpressionDeclaration[name = 'Union']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelExpression::Union).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					seqAbstract := seqAbstract->sortedBy(e | e.name); //just a way to have always the same order ?
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.expressions += result;
		}
	}
	
	mapping inMM4::SystemFunction::allSynchronousReceiveCalls22Expression():TimeModel::CCSLModel::ClockExpressionAndRelation::Expression
	{
		init{

	

				-- ICI
				var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
						->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
							and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
				 	.oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
							eo.oclIsTypeOf(interaction::SequenceMessage)
							and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
							and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
					).oclAsType(interaction::SequenceMessage);
				allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
				var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
				allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
		

		var sources : Sequence(MessageEnd) := allReplySet.receivingEnd->asSequence();
		var lastExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression :=null;
		var i : Integer := 3;
		var newExpr : TimeModel::CCSLModel::ClockExpressionAndRelation::Expression := lastExpr;
		var size : Integer = sources->size(); 
		if(size = 1)then{
			result := self.map intermediate_allSynchronousReceiveCalls22Expression(sources->at(1),sources->at(1), 1);
		}else{
			lastExpr := self.map intermediate_allSynchronousReceiveCalls22Expression(sources->at(1),sources->at(2), 1);
			while (i <= size){
				newExpr := self.map intermediate_allSynchronousReceiveCalls22Expression(lastExpr,sources->at(i), i);
				lastExpr := newExpr;
				i := i + 1;
			};
			result := lastExpr;
		}
		endif;
		}
		
		end{
			theMainBlock.expressions += result;
		}
	}




	 	mapping inMM2::SystemFunction::ACTIVATED2Clock() :TimeModel::Clock 
			when { (self.ownedFunctions->isEmpty()) }
		{
			name:= getNameOrUID(self.oclAsType(EObject))+'_ACTIVATED';
			tickingEvent := object TimeModel::Event{
 				referencedObjectRefs += self.oclAsType(EObject);
				//referencedObjectRefs += self.oclAsType(EObject);
				referencedObjectRefs += self.oclAsType(EObject).eClass().eAllOperations->select(op |op.name = "getLabel")->first().oclAsType(EObject);
			
				name := 'evt_'+getNameOrUID(self.oclAsType(EObject))+'_ACTIVATED';
			kind :=TimeModel::EventKind::undefined;
						
			};
			type:= Kernel_Clock_Type;

			end{
				theMainBlock.elements += result;
			}
		}
	 	mapping inMM2::SystemFunction::STARTED2Clock() :TimeModel::Clock 
			when { (self.ownedFunctions->isEmpty()) }
		{
			name:= getNameOrUID(self.oclAsType(EObject))+'_STARTED';
			tickingEvent := object TimeModel::Event{
 				referencedObjectRefs += self.oclAsType(EObject);
				//referencedObjectRefs += self.oclAsType(EObject);
				referencedObjectRefs += self.oclAsType(EObject).eClass().eAllOperations->select(op |op.name = "hasUnnamedLabel")->first().oclAsType(EObject);
			
				name := 'evt_'+getNameOrUID(self.oclAsType(EObject))+'_STARTED';
			kind :=TimeModel::EventKind::undefined;
						
			};
			type:= Kernel_Clock_Type;

			end{
				theMainBlock.elements += result;
			}
		}
	 	mapping inMM2::SystemFunction::TERMINATED2Clock() :TimeModel::Clock 
			when { (self.ownedFunctions->isEmpty()) }
		{
			name:= getNameOrUID(self.oclAsType(EObject))+'_TERMINATED';
			tickingEvent := object TimeModel::Event{
 				referencedObjectRefs += self.oclAsType(EObject);
				//referencedObjectRefs += self.oclAsType(EObject);
				referencedObjectRefs += self.oclAsType(EObject).eClass().eAllOperations->select(op |op.name = "hasUnnamedLabel")->first().oclAsType(EObject);
			
				name := 'evt_'+getNameOrUID(self.oclAsType(EObject))+'_TERMINATED';
			kind :=TimeModel::EventKind::undefined;
						
			};
			type:= Kernel_Clock_Type;

			end{
				theMainBlock.elements += result;
			}
		}
	 	mapping inMM2::SystemFunction::SUSPENDED2Clock() :TimeModel::Clock 
			when { (self.ownedFunctions->isEmpty()) }
		{
			name:= getNameOrUID(self.oclAsType(EObject))+'_SUSPENDED';
			tickingEvent := object TimeModel::Event{
 				referencedObjectRefs += self.oclAsType(EObject);
				//referencedObjectRefs += self.oclAsType(EObject);
				referencedObjectRefs += self.oclAsType(EObject).eClass().eAllOperations->select(op |op.name = "getFullLabel")->first().oclAsType(EObject);
			
				name := 'evt_'+getNameOrUID(self.oclAsType(EObject))+'_SUSPENDED';
			kind :=TimeModel::EventKind::undefined;
						
			};
			type:= Kernel_Clock_Type;

			end{
				theMainBlock.elements += result;
			}
		}
	 	mapping inMM2::SystemFunction::unsuspend2Clock() :TimeModel::Clock 
			when { (self.ownedFunctions->isEmpty()) }
		{
			name:= getNameOrUID(self.oclAsType(EObject))+'_unsuspend';
			tickingEvent := object TimeModel::Event{
 				referencedObjectRefs += self.oclAsType(EObject);
				//referencedObjectRefs += self.oclAsType(EObject);
				referencedObjectRefs += self.oclAsType(EObject).eClass().eAllOperations->select(op |op.name = "destroy")->first().oclAsType(EObject);
			
				name := 'evt_'+getNameOrUID(self.oclAsType(EObject))+'_unsuspend';
			kind :=TimeModel::EventKind::undefined;
						
			};
			type:= Kernel_Clock_Type;

			end{
				theMainBlock.elements += result;
			}
		}
	 	mapping inMM2::SystemFunction::isRunning2Clock() :TimeModel::Clock 
			when { (self.ownedFunctions->isEmpty()) }
		{
			name:= getNameOrUID(self.oclAsType(EObject))+'_isRunning';
			tickingEvent := object TimeModel::Event{
 				referencedObjectRefs += self.oclAsType(EObject);
				//referencedObjectRefs += self.oclAsType(EObject);
				referencedObjectRefs += self.oclAsType(EObject).eClass().eAllOperations->select(op |op.name = "getLabel")->first().oclAsType(EObject);
			
				name := 'evt_'+getNameOrUID(self.oclAsType(EObject))+'_isRunning';
			kind :=TimeModel::EventKind::undefined;
						
			};
			type:= Kernel_Clock_Type;

			end{
				theMainBlock.elements += result;
			}
		}
	 	mapping inMM2::SystemFunction::hasBeenElected2Clock() :TimeModel::Clock 
			when { (self.ownedFunctions->isEmpty()) }
		{
			name:= getNameOrUID(self.oclAsType(EObject))+'_hasBeenElected';
			tickingEvent := object TimeModel::Event{
 				referencedObjectRefs += self.oclAsType(EObject);
			
				name := 'evt_'+getNameOrUID(self.oclAsType(EObject))+'_hasBeenElected';
			kind :=TimeModel::EventKind::undefined;
						
			};
			type:= Kernel_Clock_Type;

			end{
				theMainBlock.elements += result;
			}
		}

//relation stuff		
	 	mapping inMM2::System::isWorking2Clock() :TimeModel::Clock 
		{
			name:= getNameOrUID(self.oclAsType(EObject))+'_isWorking';
			tickingEvent := object TimeModel::Event{
 				referencedObjectRefs += self.oclAsType(EObject);
			
				name := 'evt_'+getNameOrUID(self.oclAsType(EObject))+'_isWorking';
			kind :=TimeModel::EventKind::undefined;
						
			};
			type:= Kernel_Clock_Type;

			end{
				theMainBlock.elements += result;
			}
		}

//relation stuff		
	 	mapping inMM2::SystemAnalysis::ms2Clock() :TimeModel::Clock 
		{
			name:= getNameOrUID(self.oclAsType(EObject))+'_ms';
			tickingEvent := object TimeModel::Event{
 				referencedObjectRefs += self.oclAsType(EObject);
			
				name := 'evt_'+getNameOrUID(self.oclAsType(EObject))+'_ms';
			kind :=TimeModel::EventKind::undefined;
						
			};
			type:= Kernel_Clock_Type;

			end{
				theMainBlock.elements += result;
			}
		}

//relation stuff		
	 	mapping inMM3::MessageEnd::messEnd_occurs2Clock() :TimeModel::Clock 
		{
			name:= getNameOrUID(self.oclAsType(EObject))+'_messEnd_occurs';
			tickingEvent := object TimeModel::Event{
 				referencedObjectRefs += self.oclAsType(EObject);
				//referencedObjectRefs += self.oclAsType(EObject);
				referencedObjectRefs += self.oclAsType(EObject).eClass().eAllOperations->select(op |op.name = "getLabel")->first().oclAsType(EObject);
			
				name := 'evt_'+getNameOrUID(self.oclAsType(EObject))+'_messEnd_occurs';
			kind :=TimeModel::EventKind::undefined;
						
			};
			type:= Kernel_Clock_Type;

			end{
				theMainBlock.elements += result;
			}
		}

//relation stuff		
	 	mapping inMM3::ExecutionEnd::execEnd_occurs2Clock() :TimeModel::Clock 
		{
			name:= getNameOrUID(self.oclAsType(EObject))+'_execEnd_occurs';
			tickingEvent := object TimeModel::Event{
 				referencedObjectRefs += self.oclAsType(EObject);
				//referencedObjectRefs += self.oclAsType(EObject);
				referencedObjectRefs += self.oclAsType(EObject).eClass().eAllOperations->select(op |op.name = "getLabel")->first().oclAsType(EObject);
			
				name := 'evt_'+getNameOrUID(self.oclAsType(EObject))+'_execEnd_occurs';
			kind :=TimeModel::EventKind::undefined;
						
			};
			type:= Kernel_Clock_Type;

			end{
				theMainBlock.elements += result;
			}
		}

//relation stuff		
	 	mapping inMM3::AbstractEnd::abstractEnd_occurs2Clock() :TimeModel::Clock 
		{
			name:= getNameOrUID(self.oclAsType(EObject))+'_abstractEnd_occurs';
			tickingEvent := object TimeModel::Event{
 				referencedObjectRefs += self.oclAsType(EObject);
			
				name := 'evt_'+getNameOrUID(self.oclAsType(EObject))+'_abstractEnd_occurs';
			kind :=TimeModel::EventKind::undefined;
						
			};
			type:= Kernel_Clock_Type;

			end{
				theMainBlock.elements += result;
			}
		}

//relation stuff		

//relation stuff		
	

//Create an intermediate relation
	mapping inMM3::InstanceRole::intermediate_endsInOrder12endsInOrder(an1 : AbstractEnd, an2 : AbstractEnd, nbi : Integer, nbj : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
	{
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_endsInOrder'+nbi.toString()+"_"+nbj.toString();
		var seqAbstract : Sequence(Stdlib::Element) := seqOfRelationDeclaration[name = 'Causes']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::NonStrictPrecedence).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence();
		type := seqOfRelationDeclaration->select(rd | rd.name = "Causes")->first();
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an1.oclAsType(EObject))+'_abstractEnd_occurs']->first();
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an2.oclAsType(EObject))+'_abstractEnd_occurs']->first();
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.relations += result;
		}
	}
	
	mapping inMM3::InstanceRole::endsInOrder12endsInOrder()
	{
		init{
					-- ICI
			
			var sources : Sequence(AbstractEnd) := self.abstractEnds->asSequence();
			var i : Integer := 1;
			var j : Integer := 1;
			var size : Integer = sources->size(); 
			while (i <= size){
				j := i+1;
				while (j <= size){
					theMainBlock.relations +=  self.map intermediate_endsInOrder12endsInOrder(sources->at(i),sources->at(j), i, j);
					j := j + 1;
				};
				i := i + 1;
			};
		}
	}

		
	
		mapping inMM3::InstanceRole::nonRentrantSCenario32nonRentrantSCenario(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
				(self.abstractEnds->size() > 1) 
				
}
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"WeakAlternates_nonRentrantSCenario";
			type := seqOfRelationDeclaration->select(rd | rd.name = "WeakAlternates")->first();
					-- ICI
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.abstractEnds->first().oclAsType(EObject))+'_abstractEnd_occurs']->first();
					_abstract := seqOfAbstractEntity[name = 'weakAlternatesLeftClock']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.abstractEnds->last().oclAsType(EObject))+'_abstractEnd_occurs']->first();
					_abstract := seqOfAbstractEntity[name = 'weakAlternatesRightClock']->first();
				};
		
		theMainBlock.relations += result;
		}
		

//relation stuff		
	
		mapping inMM3::SequenceMessage::instantaneousReply32instantaneousReply(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
				(self.kind = MessageKind::REPLY) 
				
}
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"Causes_instantaneousReply";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Causes")->first();
					-- ICI
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.sendingEnd.oclAsType(EObject))+'_messEnd_occurs']->first();
					_abstract := seqOfRelationDeclaration[name = 'Causes']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.receivingEnd.oclAsType(EObject))+'_messEnd_occurs']->first();
					_abstract := seqOfRelationDeclaration[name = 'Causes']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM3::SequenceMessage::causalityCall32causalityCall(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
				(self.kind <> MessageKind::REPLY) 
				
}
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"Causes_causalityCall";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Causes")->first();
					-- ICI
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.sendingEnd.oclAsType(EObject))+'_messEnd_occurs']->first();
					_abstract := seqOfRelationDeclaration[name = 'Causes']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.receivingEnd.oclAsType(EObject))+'_messEnd_occurs']->first();
					_abstract := seqOfRelationDeclaration[name = 'Causes']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM3::SequenceMessage::sendMeansActivates32sendMeansActivates(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
				(self.kind <> MessageKind::REPLY) 
				
}
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"Coincides_sendMeansActivates";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Coincides")->first();
					-- ICI
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.sendingEnd.oclAsType(EObject))+'_messEnd_occurs']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.receivingFunction.oclAsType(ctx::SystemFunction).oclAsType(EObject))+'_ACTIVATED']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		

//relation stuff		
	
		mapping inMM3::MessageEnd::messIsAbst12messIsAbst(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"Coincides_messIsAbst";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Coincides")->first();
					-- ICI
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_abstractEnd_occurs']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_messEnd_occurs']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		

//relation stuff		
	
		mapping inMM3::ExecutionEnd::execIsAbst12execIsAbst(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"Coincides_execIsAbst";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Coincides")->first();
					-- ICI
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_abstractEnd_occurs']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_execEnd_occurs']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		

//relation stuff		
	
		mapping inMM3::Execution::eitherElectedXORmessageOccured12eitherElectedXORmessageOccured(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"Exclusion_eitherElectedXORmessageOccured";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Exclusion")->first();
					-- ICI
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.covered.representedInstance.oclAsType(ctx::SystemFunction).oclAsType(EObject))+'_hasBeenElected']->first();
					_abstract := seqOfRelationDeclaration[name = 'Exclusion']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.start.oclAsType(AbstractEnd).oclAsType(EObject))+'_abstractEnd_occurs']->first();
					_abstract := seqOfRelationDeclaration[name = 'Exclusion']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM3::Execution::startedOrrElectedMeansStarts32startedOrrElectedMeansStarts(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"Coincides_startedOrrElectedMeansStarts";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Coincides")->first();
					-- ICI
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
							bindable := self -> map startedOrElected2Expression()->asSequence()->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.covered.representedInstance.oclAsType(ctx::SystemFunction).oclAsType(EObject))+'_STARTED']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM3::Execution::stopWhenEndOccurs12stopWhenEndOccurs(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"Coincides_stopWhenEndOccurs";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Coincides")->first();
					-- ICI
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.finish.oclAsType(AbstractEnd).oclAsType(EObject))+'_abstractEnd_occurs']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.covered.representedInstance.oclAsType(ctx::SystemFunction).oclAsType(EObject))+'_TERMINATED']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM3::Execution::startBeforeFinish_nonRentrant12startBeforeFinish_nonRentrant(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"WeakAlternates_startBeforeFinish_nonRentrant";
			type := seqOfRelationDeclaration->select(rd | rd.name = "WeakAlternates")->first();
					-- ICI
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.start.oclAsType(AbstractEnd).oclAsType(EObject))+'_abstractEnd_occurs']->first();
					_abstract := seqOfAbstractEntity[name = 'weakAlternatesLeftClock']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.finish.oclAsType(AbstractEnd).oclAsType(EObject))+'_abstractEnd_occurs']->first();
					_abstract := seqOfAbstractEntity[name = 'weakAlternatesRightClock']->first();
				};
		
		theMainBlock.relations += result;
		}
		
		mapping inMM3::ConstraintDuration::isPeriodic2Integer() :TimeModel::BasicType::IntegerElement
		 {
			name:= getNameOrUID(self.oclAsType(EObject)) + '_isPeriodic';
			type:= Kernel_Integer;
			value := if (self.duration.startsWith('p')) then 1 else 0 endif;

			end{
				theMainBlock.elements += result;
			}
		}
		mapping inMM3::ConstraintDuration::firstValue2Integer() :TimeModel::BasicType::IntegerElement
		 {
			name:= getNameOrUID(self.oclAsType(EObject)) + '_firstValue';
			type:= Kernel_Integer;
			value := self.duration.replaceAll('^..','').replaceAll(';.*','').toString().toInteger().round();

			end{
				theMainBlock.elements += result;
			}
		}
		mapping inMM3::ConstraintDuration::secondValue2Integer() :TimeModel::BasicType::IntegerElement
		 {
			name:= getNameOrUID(self.oclAsType(EObject)) + '_secondValue';
			type:= Kernel_Integer;
			value := self.duration.replaceAll('..[0-9]+;','').replaceAll(']','').toString().toInteger().round();

			end{
				theMainBlock.elements += result;
			}
		}

//relation stuff		
	
		mapping inMM3::ConstraintDuration::DurationAsAPeriodic32DurationAsAPeriodic(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
		      let isPeriodic : Integer = if (self.duration.startsWith('p')) then 1 else 0 endif in
		      let firstValue : Integer = self.duration.replaceAll('^..','').replaceAll(';.*','').toString().toInteger().round() in
		      let secondValue : Integer = self.duration.replaceAll('..[0-9]+;','').replaceAll(']','').toString().toInteger().round() in
		      let theSystem : ctx::SystemAnalysis = self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eContainer().oclAsType(ctx::SystemAnalysis) in
		      let otherTasksOnSameCPU : Collection(ctx::SystemFunction) = self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eContainer().eContents()->select(eo | eo.oclIsKindOf(ctx::System)).oclAsType(ctx::System).ownedFunctionalAllocation.function.oclAsType(ctx::SystemFunction)->select(sf | (sf = self.start.oclAsType(AbstractEnd).covered.representedInstance)) in
				(
			isPeriodic = 1
			and 
			firstValue <> 0
		) 
				
}
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"PeriodicWithJitterUnknowOffset_DurationAsAPeriodic";
			type := seqOfRelationDeclaration->select(rd | rd.name = "PeriodicWithJitterUnknowOffset")->first();
					-- ICI
					var isPeriodic : Integer := if (self.duration.startsWith('p')) then 1 else 0 endif;
					allVarDefs->append("ConstraintDuration::isPeriodic"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var firstValue : Integer := self.duration.replaceAll('^..','').replaceAll(';.*','').toString().toInteger().round();
					allVarDefs->append("ConstraintDuration::firstValue"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var secondValue : Integer := self.duration.replaceAll('..[0-9]+;','').replaceAll(']','').toString().toInteger().round();
					allVarDefs->append("ConstraintDuration::secondValue"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var theSystem : ctx::SystemAnalysis := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eContainer().oclAsType(ctx::SystemAnalysis);
					allVarDefs->append("ConstraintDuration::theSystem"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var otherTasksOnSameCPU : Collection(ctx::SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eContainer().eContents()->select(eo | eo.oclIsKindOf(ctx::System)).oclAsType(ctx::System).ownedFunctionalAllocation.function.oclAsType(ctx::SystemFunction)->select(sf | (sf = self.start.oclAsType(AbstractEnd).covered.representedInstance));
					allVarDefs->append("ConstraintDuration::otherTasksOnSameCPU"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.start.oclAsType(AbstractEnd).oclAsType(EObject))+'_abstractEnd_occurs']->first();
					_abstract := seqOfAbstractEntity[name = 'PeriodicWithJitterUnknowOffsetRes']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(theSystem.oclAsType(EObject))+'_ms']->first();
					_abstract := seqOfAbstractEntity[name = 'PeriodicWithJitterUnknowOffsetBase']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_firstValue']->first();
					_abstract := seqOfAbstractEntity[name = 'PeriodicWithJitterUnknowOffsetPeriod']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_secondValue']->first();
					_abstract := seqOfAbstractEntity[name = 'PeriodicWithJitterUnknowOffsetJitter']->first();
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM3::ConstraintDuration::DurationOfAllocatedExec32DurationOfAllocatedExec(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
		      let isPeriodic : Integer = if (self.duration.startsWith('p')) then 1 else 0 endif in
		      let firstValue : Integer = self.duration.replaceAll('^..','').replaceAll(';.*','').toString().toInteger().round() in
		      let secondValue : Integer = self.duration.replaceAll('..[0-9]+;','').replaceAll(']','').toString().toInteger().round() in
		      let theSystem : ctx::SystemAnalysis = self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eContainer().oclAsType(ctx::SystemAnalysis) in
		      let otherTasksOnSameCPU : Collection(ctx::SystemFunction) = self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eContainer().eContents()->select(eo | eo.oclIsKindOf(ctx::System)).oclAsType(ctx::System).ownedFunctionalAllocation.function.oclAsType(ctx::SystemFunction)->select(sf | (sf = self.start.oclAsType(AbstractEnd).covered.representedInstance)) in
				(
			(not (isPeriodic = 1)) 
			and
			firstValue <> 0 
			and
			otherTasksOnSameCPU->size() > 0
		) 
				
}
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"Duration_DurationOfAllocatedExec";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Duration")->first();
					-- ICI
					var isPeriodic : Integer := if (self.duration.startsWith('p')) then 1 else 0 endif;
					allVarDefs->append("ConstraintDuration::isPeriodic"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var firstValue : Integer := self.duration.replaceAll('^..','').replaceAll(';.*','').toString().toInteger().round();
					allVarDefs->append("ConstraintDuration::firstValue"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var secondValue : Integer := self.duration.replaceAll('..[0-9]+;','').replaceAll(']','').toString().toInteger().round();
					allVarDefs->append("ConstraintDuration::secondValue"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var theSystem : ctx::SystemAnalysis := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eContainer().oclAsType(ctx::SystemAnalysis);
					allVarDefs->append("ConstraintDuration::theSystem"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var otherTasksOnSameCPU : Collection(ctx::SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eContainer().eContents()->select(eo | eo.oclIsKindOf(ctx::System)).oclAsType(ctx::System).ownedFunctionalAllocation.function.oclAsType(ctx::SystemFunction)->select(sf | (sf = self.start.oclAsType(AbstractEnd).covered.representedInstance));
					allVarDefs->append("ConstraintDuration::otherTasksOnSameCPU"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.start.oclAsType(AbstractEnd).oclAsType(EObject))+'_abstractEnd_occurs']->first();
					_abstract := seqOfAbstractEntity[name = 'Start']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.finish.oclAsType(AbstractEnd).oclAsType(EObject))+'_abstractEnd_occurs']->first();
					_abstract := seqOfAbstractEntity[name = 'End']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.start.oclAsType(AbstractEnd).covered.representedInstance.oclAsType(ctx::SystemFunction).oclAsType(EObject))+'_isRunning']->first();
					_abstract := seqOfAbstractEntity[name = 'Base']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_firstValue']->first();
					_abstract := seqOfAbstractEntity[name = 'MinValue']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_secondValue']->first();
					_abstract := seqOfAbstractEntity[name = 'MaxValue']->first();
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM3::ConstraintDuration::DurationOfNonAllocatedExec32DurationOfNonAllocatedExec(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
		      let isPeriodic : Integer = if (self.duration.startsWith('p')) then 1 else 0 endif in
		      let firstValue : Integer = self.duration.replaceAll('^..','').replaceAll(';.*','').toString().toInteger().round() in
		      let secondValue : Integer = self.duration.replaceAll('..[0-9]+;','').replaceAll(']','').toString().toInteger().round() in
		      let theSystem : ctx::SystemAnalysis = self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eContainer().oclAsType(ctx::SystemAnalysis) in
		      let otherTasksOnSameCPU : Collection(ctx::SystemFunction) = self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eContainer().eContents()->select(eo | eo.oclIsKindOf(ctx::System)).oclAsType(ctx::System).ownedFunctionalAllocation.function.oclAsType(ctx::SystemFunction)->select(sf | (sf = self.start.oclAsType(AbstractEnd).covered.representedInstance)) in
				(
			(not (isPeriodic = 1)) 
			and
			firstValue <> 0 
			and
			otherTasksOnSameCPU->size() = 0
		) 
				
}
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"Duration_DurationOfNonAllocatedExec";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Duration")->first();
					-- ICI
					var isPeriodic : Integer := if (self.duration.startsWith('p')) then 1 else 0 endif;
					allVarDefs->append("ConstraintDuration::isPeriodic"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var firstValue : Integer := self.duration.replaceAll('^..','').replaceAll(';.*','').toString().toInteger().round();
					allVarDefs->append("ConstraintDuration::firstValue"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var secondValue : Integer := self.duration.replaceAll('..[0-9]+;','').replaceAll(']','').toString().toInteger().round();
					allVarDefs->append("ConstraintDuration::secondValue"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var theSystem : ctx::SystemAnalysis := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eContainer().oclAsType(ctx::SystemAnalysis);
					allVarDefs->append("ConstraintDuration::theSystem"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var otherTasksOnSameCPU : Collection(ctx::SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eContainer().eContents()->select(eo | eo.oclIsKindOf(ctx::System)).oclAsType(ctx::System).ownedFunctionalAllocation.function.oclAsType(ctx::SystemFunction)->select(sf | (sf = self.start.oclAsType(AbstractEnd).covered.representedInstance));
					allVarDefs->append("ConstraintDuration::otherTasksOnSameCPU"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.start.oclAsType(AbstractEnd).oclAsType(EObject))+'_abstractEnd_occurs']->first();
					_abstract := seqOfAbstractEntity[name = 'Start']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.finish.oclAsType(AbstractEnd).oclAsType(EObject))+'_abstractEnd_occurs']->first();
					_abstract := seqOfAbstractEntity[name = 'End']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.start.oclAsType(AbstractEnd).covered.representedInstance.oclAsType(ctx::SystemFunction).oclAsType(EObject))+'_isRunning']->first();
					_abstract := seqOfAbstractEntity[name = 'Base']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_firstValue']->first();
					_abstract := seqOfAbstractEntity[name = 'MinValue']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_secondValue']->first();
					_abstract := seqOfAbstractEntity[name = 'MaxValue']->first();
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM3::ConstraintDuration::DurationOfZero32DurationOfZero(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
		      let isPeriodic : Integer = if (self.duration.startsWith('p')) then 1 else 0 endif in
		      let firstValue : Integer = self.duration.replaceAll('^..','').replaceAll(';.*','').toString().toInteger().round() in
		      let secondValue : Integer = self.duration.replaceAll('..[0-9]+;','').replaceAll(']','').toString().toInteger().round() in
		      let theSystem : ctx::SystemAnalysis = self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eContainer().oclAsType(ctx::SystemAnalysis) in
		      let otherTasksOnSameCPU : Collection(ctx::SystemFunction) = self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eContainer().eContents()->select(eo | eo.oclIsKindOf(ctx::System)).oclAsType(ctx::System).ownedFunctionalAllocation.function.oclAsType(ctx::SystemFunction)->select(sf | (sf = self.start.oclAsType(AbstractEnd).covered.representedInstance)) in
				(
			(not (isPeriodic = 1)) 
			and
			firstValue = 0 
			and
			secondValue = 0
		) 
				
}
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"Coincides_DurationOfZero";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Coincides")->first();
					-- ICI
					var isPeriodic : Integer := if (self.duration.startsWith('p')) then 1 else 0 endif;
					allVarDefs->append("ConstraintDuration::isPeriodic"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var firstValue : Integer := self.duration.replaceAll('^..','').replaceAll(';.*','').toString().toInteger().round();
					allVarDefs->append("ConstraintDuration::firstValue"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var secondValue : Integer := self.duration.replaceAll('..[0-9]+;','').replaceAll(']','').toString().toInteger().round();
					allVarDefs->append("ConstraintDuration::secondValue"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var theSystem : ctx::SystemAnalysis := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eContainer().oclAsType(ctx::SystemAnalysis);
					allVarDefs->append("ConstraintDuration::theSystem"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var otherTasksOnSameCPU : Collection(ctx::SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eContainer().eContents()->select(eo | eo.oclIsKindOf(ctx::System)).oclAsType(ctx::System).ownedFunctionalAllocation.function.oclAsType(ctx::SystemFunction)->select(sf | (sf = self.start.oclAsType(AbstractEnd).covered.representedInstance));
					allVarDefs->append("ConstraintDuration::otherTasksOnSameCPU"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.start.oclAsType(AbstractEnd).oclAsType(EObject))+'_abstractEnd_occurs']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.finish.oclAsType(AbstractEnd).oclAsType(EObject))+'_abstractEnd_occurs']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		

//relation stuff		
	

//Create an intermediate relation
	mapping inMM4::System::intermediate_nonPreemptiveSched_part232nonPreemptiveSched_part2(an1 : SystemFunction, an2 : SystemFunction, nbi : Integer, nbj : Integer):TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
	{
		name := getNameOrUID(self.oclAsType(EObject))+'intermediate_nonPreemptiveSched_part2'+nbi.toString()+"_"+nbj.toString();
		var seqAbstract : Sequence(Stdlib::Element) := seqOfRelationDeclaration[name = 'Exclusion']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::Exclusion).allSubobjectsOfKind(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)->asSequence();
		type := seqOfRelationDeclaration->select(rd | rd.name = "Exclusion")->first();
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an1.oclAsType(EObject))+'_STARTED']->first();
					_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(an2.oclAsType(EObject))+'_STARTED']->first();
					_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
				};
		end{
			theMainBlock.relations += result;
		}
	}
	
	mapping inMM4::System::nonPreemptiveSched_part232nonPreemptiveSched_part2()
			when { (
			self.ownedFunctionalAllocation->size() > 0
		) }
	{
		init{
					-- ICI
			
			var sources : Sequence(SystemFunction) := self.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->asSequence();
			var i : Integer := 1;
			var j : Integer := 1;
			var size : Integer = sources->size(); 
			while (i <= size){
				j := i+1;
				while (j <= size){
					theMainBlock.relations +=  self.map intermediate_nonPreemptiveSched_part232nonPreemptiveSched_part2(sources->at(i),sources->at(j), i, j);
					j := j + 1;
				};
				i := i + 1;
			};
		}
	}

		
	
		mapping inMM4::System::isWorkingIfATaskIsRunning32isWorkingIfATaskIsRunning(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"Coincides_isWorkingIfATaskIsRunning";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Coincides")->first();
					-- ICI
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
							bindable := self -> map aTaskIsRunning2Expression()->asSequence()->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_isWorking']->first();
					_abstract := seqOfRelationDeclaration[name = 'Coincides']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		

//relation stuff		
	
		mapping inMM4::SystemFunction::unsuspendBeforeElection32unsuspendBeforeElection(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
		      let allSynchCallSet : Collection(interaction::SequenceMessage) = self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
				->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
					and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
		 	.oclAsType(interaction::SequenceMessage) in
		      let allReplySet : Collection(interaction::SequenceMessage) = (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
					->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
					and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
			).oclAsType(interaction::SequenceMessage) in
		      let otherTasks : Collection(SystemFunction) = self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self) in
				(
	  		self.ownedFunctions->isEmpty()
	  	) 
				
}
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"Causes_unsuspendBeforeElection";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Causes")->first();
					-- ICI
					var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
								and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
					 	.oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
								->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
								and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
						).oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
					allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_unsuspend']->first();
					_abstract := seqOfRelationDeclaration[name = 'Causes']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_hasBeenElected']->first();
					_abstract := seqOfRelationDeclaration[name = 'Causes']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM4::SystemFunction::taskTaskInv32taskTaskInv(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
		      let allSynchCallSet : Collection(interaction::SequenceMessage) = self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
				->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
					and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
		 	.oclAsType(interaction::SequenceMessage) in
		      let allReplySet : Collection(interaction::SequenceMessage) = (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
					->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
					and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
			).oclAsType(interaction::SequenceMessage) in
		      let otherTasks : Collection(SystemFunction) = self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self) in
				(
			self.ownedFunctions->isEmpty()
		) 
				
}
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"TaskState_taskTaskInv";
			type := seqOfRelationDeclaration->select(rd | rd.name = "TaskState")->first();
					-- ICI
					var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
								and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
					 	.oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
								->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
								and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
						).oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
					allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_ACTIVATED']->first();
					_abstract := seqOfAbstractEntity[name = 'TaskStateRealease']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_STARTED']->first();
					_abstract := seqOfAbstractEntity[name = 'TaskStateStart']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_TERMINATED']->first();
					_abstract := seqOfAbstractEntity[name = 'TaskStateStop']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_SUSPENDED']->first();
					_abstract := seqOfAbstractEntity[name = 'TaskStateSuspend']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_unsuspend']->first();
					_abstract := seqOfAbstractEntity[name = 'TaskStateUnsuspend']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_isRunning']->first();
					_abstract := seqOfAbstractEntity[name = 'TaskStateIsRunning']->first();
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM4::SystemFunction::isRunningTakesTime32isRunningTakesTime(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
		      let allSynchCallSet : Collection(interaction::SequenceMessage) = self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
				->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
					and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
		 	.oclAsType(interaction::SequenceMessage) in
		      let allReplySet : Collection(interaction::SequenceMessage) = (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
					->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
					and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
			).oclAsType(interaction::SequenceMessage) in
		      let otherTasks : Collection(SystemFunction) = self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self) in
				(
			self.ownedFunctions->isEmpty()
		) 
				
}
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"SubClock_isRunningTakesTime";
			type := seqOfRelationDeclaration->select(rd | rd.name = "SubClock")->first();
					-- ICI
					var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
								and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
					 	.oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
								->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
								and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
						).oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
					allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_isRunning']->first();
					_abstract := seqOfRelationDeclaration[name = 'SubClock']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).oclAsType(EObject))+'_ms']->first();
					_abstract := seqOfRelationDeclaration[name = 'SubClock']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM4::SystemFunction::SuspendIfAnotherStartOnSameCPUOrSendSynchCall72SuspendIfAnotherStartOnSameCPUOrSendSynchCall(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
		      let allSynchCallSet : Collection(interaction::SequenceMessage) = self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
				->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
					and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
		 	.oclAsType(interaction::SequenceMessage) in
		      let allReplySet : Collection(interaction::SequenceMessage) = (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
					->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
					and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
			).oclAsType(interaction::SequenceMessage) in
		      let otherTasks : Collection(SystemFunction) = self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self) in
				(
			allSynchCallSet->size() > 0
			and
			otherTasks->size() > 0
			and
			self.ownedFunctions->isEmpty()
		) 
				
}
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"SuspendOnlyWhenNeeded_SuspendIfAnotherStartOnSameCPUOrSendSynchCall";
			type := seqOfRelationDeclaration->select(rd | rd.name = "SuspendOnlyWhenNeeded")->first();
					-- ICI
					var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
								and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
					 	.oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
								->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
								and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
						).oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
					allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
							bindable := self -> map allSuspenders2Expression()->asSequence()->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_allSuspenders']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_TERMINATED']->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_allSuspendBlockers']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
							bindable := self -> map allowers2Expression()->asSequence()->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_allSuspendAllowers']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_SUSPENDED']->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_suspend']->first();
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM4::SystemFunction::SuspendIfAnotherStartOnSameCPU52SuspendIfAnotherStartOnSameCPU(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
		      let allSynchCallSet : Collection(interaction::SequenceMessage) = self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
				->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
					and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
		 	.oclAsType(interaction::SequenceMessage) in
		      let allReplySet : Collection(interaction::SequenceMessage) = (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
					->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
					and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
			).oclAsType(interaction::SequenceMessage) in
		      let otherTasks : Collection(SystemFunction) = self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self) in
				(
			allSynchCallSet->size() = 0
			and
			otherTasks->size() > 0
			and
			self.ownedFunctions->isEmpty()
		) 
				
}
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"SuspendOnlyWhenNeeded_SuspendIfAnotherStartOnSameCPU";
			type := seqOfRelationDeclaration->select(rd | rd.name = "SuspendOnlyWhenNeeded")->first();
					-- ICI
					var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
								and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
					 	.oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
								->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
								and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
						).oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
					allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
							bindable := self -> map allOtherStarts22Expression()->asSequence()->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_allSuspenders']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_TERMINATED']->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_allSuspendBlockers']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
							bindable := self -> map allowers22Expression()->asSequence()->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_allSuspendAllowers']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_SUSPENDED']->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_suspend']->first();
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM4::SystemFunction::SuspendIfSendSynchCall52SuspendIfSendSynchCall(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
		      let allSynchCallSet : Collection(interaction::SequenceMessage) = self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
				->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
					and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
		 	.oclAsType(interaction::SequenceMessage) in
		      let allReplySet : Collection(interaction::SequenceMessage) = (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
					->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
					and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
			).oclAsType(interaction::SequenceMessage) in
		      let otherTasks : Collection(SystemFunction) = self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self) in
				(
			allSynchCallSet->size() > 0
			and
			otherTasks->size() = 0
			and
			self.ownedFunctions->isEmpty()
		) 
				
}
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"SuspendOnlyWhenNeeded_SuspendIfSendSynchCall";
			type := seqOfRelationDeclaration->select(rd | rd.name = "SuspendOnlyWhenNeeded")->first();
					-- ICI
					var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
								and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
					 	.oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
								->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
								and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
						).oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
					allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
							bindable := self -> map allSynchronousCalls32Expression()->asSequence()->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_allSuspenders']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_TERMINATED']->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_allSuspendBlockers']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
							bindable := self -> map allowers32Expression()->asSequence()->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_allSuspendAllowers']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_SUSPENDED']->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_suspend']->first();
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM4::SystemFunction::NeverSuspend32NeverSuspend(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
		      let allSynchCallSet : Collection(interaction::SequenceMessage) = self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
				->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
					and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
		 	.oclAsType(interaction::SequenceMessage) in
		      let allReplySet : Collection(interaction::SequenceMessage) = (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
					->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
					and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
			).oclAsType(interaction::SequenceMessage) in
		      let otherTasks : Collection(SystemFunction) = self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self) in
				(
			allSynchCallSet->size() = 0
			and
			otherTasks->size() = 0
			and
			self.ownedFunctions->isEmpty()
		) 
				
}
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"Exclusion_NeverSuspend";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Exclusion")->first();
					-- ICI
					var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
								and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
					 	.oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
								->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
								and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
						).oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
					allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_SUSPENDED']->first();
					_abstract := seqOfRelationDeclaration[name = 'Exclusion']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_SUSPENDED']->first();
					_abstract := seqOfRelationDeclaration[name = 'Exclusion']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM4::SystemFunction::UnSuspendIfAnotherTerminateOnSameCPUorReceiveSynchCall82UnSuspendIfAnotherTerminateOnSameCPUorReceiveSynchCall(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
		      let allSynchCallSet : Collection(interaction::SequenceMessage) = self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
				->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
					and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
		 	.oclAsType(interaction::SequenceMessage) in
		      let allReplySet : Collection(interaction::SequenceMessage) = (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
					->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
					and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
			).oclAsType(interaction::SequenceMessage) in
		      let otherTasks : Collection(SystemFunction) = self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self) in
				(
			allReplySet->size() > 0
			and
			otherTasks->size() > 0
			and
			self.ownedFunctions->isEmpty()
		) 
				
}
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"SuspendOnlyWhenNeeded_UnSuspendIfAnotherTerminateOnSameCPUorReceiveSynchCall";
			type := seqOfRelationDeclaration->select(rd | rd.name = "SuspendOnlyWhenNeeded")->first();
					-- ICI
					var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
								and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
					 	.oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
								->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
								and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
						).oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
					allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
							bindable := self -> map allUnSuspenders2Expression()->asSequence()->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_allSuspenders']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_TERMINATED']->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_allSuspendBlockers']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_SUSPENDED']->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_allSuspendAllowers']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_unsuspend']->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_suspend']->first();
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM4::SystemFunction::UnSuspendIfAnotherTerminateOnSameCPU42UnSuspendIfAnotherTerminateOnSameCPU(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
		      let allSynchCallSet : Collection(interaction::SequenceMessage) = self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
				->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
					and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
		 	.oclAsType(interaction::SequenceMessage) in
		      let allReplySet : Collection(interaction::SequenceMessage) = (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
					->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
					and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
			).oclAsType(interaction::SequenceMessage) in
		      let otherTasks : Collection(SystemFunction) = self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self) in
				(
			allReplySet->size() = 0
			and
			otherTasks->size() > 0
			and
			self.ownedFunctions->isEmpty()
		) 
				
}
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"SuspendOnlyWhenNeeded_UnSuspendIfAnotherTerminateOnSameCPU";
			type := seqOfRelationDeclaration->select(rd | rd.name = "SuspendOnlyWhenNeeded")->first();
					-- ICI
					var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
								and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
					 	.oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
								->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
								and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
						).oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
					allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
							bindable := self -> map allOtherTerminated22Expression()->asSequence()->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_allSuspenders']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_TERMINATED']->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_allSuspendBlockers']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_SUSPENDED']->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_allSuspendAllowers']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_unsuspend']->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_suspend']->first();
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM4::SystemFunction::UnSuspendIfReceiveSynchCall42UnSuspendIfReceiveSynchCall(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
		      let allSynchCallSet : Collection(interaction::SequenceMessage) = self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
				->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
					and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
		 	.oclAsType(interaction::SequenceMessage) in
		      let allReplySet : Collection(interaction::SequenceMessage) = (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
					->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
					and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
			).oclAsType(interaction::SequenceMessage) in
		      let otherTasks : Collection(SystemFunction) = self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self) in
				(
			allReplySet->size() > 0
			and
			otherTasks->size() = 0
			and
			self.ownedFunctions->isEmpty()
		) 
				
}
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"SuspendOnlyWhenNeeded_UnSuspendIfReceiveSynchCall";
			type := seqOfRelationDeclaration->select(rd | rd.name = "SuspendOnlyWhenNeeded")->first();
					-- ICI
					var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
								and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
					 	.oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
								->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
								and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
						).oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
					allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
							bindable := self -> map allSynchronousReceiveCalls22Expression()->asSequence()->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_allSuspenders']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_TERMINATED']->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_allSuspendBlockers']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_SUSPENDED']->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_allSuspendAllowers']->first();
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_unsuspend']->first();
					_abstract := seqOfAbstractEntity[name = 'SuspendOnlyWhenNeeded_suspend']->first();
				};
		
		theMainBlock.relations += result;
		}
		
	
		mapping inMM4::SystemFunction::NeverUnsuspend32NeverUnsuspend(): TimeModel::CCSLModel::ClockExpressionAndRelation::Relation
			when { 
		      let allSynchCallSet : Collection(interaction::SequenceMessage) = self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
				->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
					and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
		 	.oclAsType(interaction::SequenceMessage) in
		      let allReplySet : Collection(interaction::SequenceMessage) = (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
					->select(eo|
					eo.oclIsTypeOf(interaction::SequenceMessage)
					and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
					and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
			).oclAsType(interaction::SequenceMessage) in
		      let otherTasks : Collection(SystemFunction) = self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self) in
				(
			allReplySet->size() = 0
			and
			otherTasks->size() = 0
			and
			self.ownedFunctions->isEmpty()
		) 
				
}
		{
		 	name := getNameOrUID(self.oclAsType(EObject))+"Exclusion_NeverUnsuspend";
			type := seqOfRelationDeclaration->select(rd | rd.name = "Exclusion")->first();
					-- ICI
					var allSynchCallSet : Collection(interaction::SequenceMessage) := self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
							->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::SYNCHRONOUS_CALL
								and eo.oclAsType(interaction::SequenceMessage).sendingFunction = self)
					 	.oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allSynchCallSet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var allReplySet : Collection(interaction::SequenceMessage) := (self.oclAsType(ecore::EObject).eCrossReferences()->select(eo | eo.oclIsKindOf(Capability)).oclAsType(Capability).ownedScenarios.ownedMessages
								->select(eo|
								eo.oclIsTypeOf(interaction::SequenceMessage)
								and eo.oclAsType(interaction::SequenceMessage).kind = interaction::MessageKind::REPLY
								and eo.oclAsType(interaction::SequenceMessage).receivingFunction = self)
						).oclAsType(interaction::SequenceMessage);
					allVarDefs->append("SystemFunction::allReplySet"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
					var otherTasks : Collection(SystemFunction) := self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().oclAsType(SystemAnalysis).ownedSystem.ownedFunctionalAllocation.function.oclAsType(SystemFunction)->select(sf| sf = self);
					allVarDefs->append("SystemFunction::otherTasks"); --to be exploited later. If you have an error close to here, please remove the explicit self when navigating to the def
			
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_unsuspend']->first();
					_abstract := seqOfRelationDeclaration[name = 'Exclusion']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).leftEntity;
				};
				bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
					bindable := theMainBlock.elements[name = getNameOrUID(self.oclAsType(EObject))+'_unsuspend']->first();
					_abstract := seqOfRelationDeclaration[name = 'Exclusion']->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::KernelRelation::KernelRelationDeclaration).rightEntity;
				};
		
		theMainBlock.relations += result;
		}
		





















mapping inMM1::Project::capellamodeller2FeedBack() : FeedBack::ActionModel {
	    theFeedBackSpec := result;
		importStatements+= object FeedBack::ImportStatement{
			importURI := getModelPath(ccsl.objectsOfType(TimeModel::Clock)->asSequence()->first().oclAsType(EObject));
		}; 
	getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map ACTIVATED2MSE();
	getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map STARTED2MSE();
	getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map TERMINATED2MSE();
	getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map SUSPENDED2MSE();
	getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map unsuspend2MSE();
	getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map isRunning2MSE();
	getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemFunction.oclAsType(EClass)).oclAsType(SystemFunction)->map hasBeenElected2MSE();
	getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), System.oclAsType(EClass)).oclAsType(System)->map isWorking2MSE();
	getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), SystemAnalysis.oclAsType(EClass)).oclAsType(SystemAnalysis)->map ms2MSE();
	getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), MessageEnd.oclAsType(EClass)).oclAsType(MessageEnd)->map messEnd_occurs2MSE();
	getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), ExecutionEnd.oclAsType(EClass)).oclAsType(ExecutionEnd)->map execEnd_occurs2MSE();
	getVeryAllElementsFromResourceSetOf(self.oclAsType(EObject), AbstractEnd.oclAsType(EClass)).oclAsType(AbstractEnd)->map abstractEnd_occurs2MSE();
}		


	 	mapping inMM2::SystemFunction::ACTIVATED2MSE() :FeedBack::ModelSpecificEvent 
			when { (self.ownedFunctions->isEmpty()) }
		{
			name:= 'MSE_'+getNameOrUID(self.oclAsType(EObject))+'_ACTIVATED';

				caller := self.oclAsType(EObject);
				action := self.oclAsType(EObject).eClass().eAllOperations->select(op |op.name = "getLabel")->first();
				solverEvent := theMainBlock.elements[TimeModel::Clock]->select(c|c.name=getNameOrUID(self.oclAsType(EObject))+'_ACTIVATED')->first().oclAsType(EObject);
				
			end{
				theFeedBackSpec.events += result;
				seqOfMSE += result
			}
		}
	 	mapping inMM2::SystemFunction::STARTED2MSE() :FeedBack::ModelSpecificEvent 
			when { (self.ownedFunctions->isEmpty()) }
		{
			name:= 'MSE_'+getNameOrUID(self.oclAsType(EObject))+'_STARTED';

				caller := self.oclAsType(EObject);
				action := self.oclAsType(EObject).eClass().eAllOperations->select(op |op.name = "hasUnnamedLabel")->first();
				solverEvent := theMainBlock.elements[TimeModel::Clock]->select(c|c.name=getNameOrUID(self.oclAsType(EObject))+'_STARTED')->first().oclAsType(EObject);
				
			end{
				theFeedBackSpec.events += result;
				seqOfMSE += result
			}
		}
	 	mapping inMM2::SystemFunction::TERMINATED2MSE() :FeedBack::ModelSpecificEvent 
			when { (self.ownedFunctions->isEmpty()) }
		{
			name:= 'MSE_'+getNameOrUID(self.oclAsType(EObject))+'_TERMINATED';

				caller := self.oclAsType(EObject);
				action := self.oclAsType(EObject).eClass().eAllOperations->select(op |op.name = "hasUnnamedLabel")->first();
				solverEvent := theMainBlock.elements[TimeModel::Clock]->select(c|c.name=getNameOrUID(self.oclAsType(EObject))+'_TERMINATED')->first().oclAsType(EObject);
				
			end{
				theFeedBackSpec.events += result;
				seqOfMSE += result
			}
		}
	 	mapping inMM2::SystemFunction::SUSPENDED2MSE() :FeedBack::ModelSpecificEvent 
			when { (self.ownedFunctions->isEmpty()) }
		{
			name:= 'MSE_'+getNameOrUID(self.oclAsType(EObject))+'_SUSPENDED';

				caller := self.oclAsType(EObject);
				action := self.oclAsType(EObject).eClass().eAllOperations->select(op |op.name = "getFullLabel")->first();
				solverEvent := theMainBlock.elements[TimeModel::Clock]->select(c|c.name=getNameOrUID(self.oclAsType(EObject))+'_SUSPENDED')->first().oclAsType(EObject);
				
			end{
				theFeedBackSpec.events += result;
				seqOfMSE += result
			}
		}
	 	mapping inMM2::SystemFunction::unsuspend2MSE() :FeedBack::ModelSpecificEvent 
			when { (self.ownedFunctions->isEmpty()) }
		{
			name:= 'MSE_'+getNameOrUID(self.oclAsType(EObject))+'_unsuspend';

				caller := self.oclAsType(EObject);
				action := self.oclAsType(EObject).eClass().eAllOperations->select(op |op.name = "destroy")->first();
				solverEvent := theMainBlock.elements[TimeModel::Clock]->select(c|c.name=getNameOrUID(self.oclAsType(EObject))+'_unsuspend')->first().oclAsType(EObject);
				
			end{
				theFeedBackSpec.events += result;
				seqOfMSE += result
			}
		}
	 	mapping inMM2::SystemFunction::isRunning2MSE() :FeedBack::ModelSpecificEvent 
			when { (self.ownedFunctions->isEmpty()) }
		{
			name:= 'MSE_'+getNameOrUID(self.oclAsType(EObject))+'_isRunning';

				caller := self.oclAsType(EObject);
				action := self.oclAsType(EObject).eClass().eAllOperations->select(op |op.name = "getLabel")->first();
				solverEvent := theMainBlock.elements[TimeModel::Clock]->select(c|c.name=getNameOrUID(self.oclAsType(EObject))+'_isRunning')->first().oclAsType(EObject);
				
			end{
				theFeedBackSpec.events += result;
				seqOfMSE += result
			}
		}
	 	mapping inMM2::SystemFunction::hasBeenElected2MSE() :FeedBack::ModelSpecificEvent 
			when { (self.ownedFunctions->isEmpty()) }
		{
			name:= 'MSE_'+getNameOrUID(self.oclAsType(EObject))+'_hasBeenElected';

				solverEvent := theMainBlock.elements[TimeModel::Clock]->select(c|c.name=getNameOrUID(self.oclAsType(EObject))+'_hasBeenElected')->first().oclAsType(EObject);
				
			end{
				theFeedBackSpec.events += result;
				seqOfMSE += result
			}
		}
	 	mapping inMM2::System::isWorking2MSE() :FeedBack::ModelSpecificEvent 
		{
			name:= 'MSE_'+getNameOrUID(self.oclAsType(EObject))+'_isWorking';

				solverEvent := theMainBlock.elements[TimeModel::Clock]->select(c|c.name=getNameOrUID(self.oclAsType(EObject))+'_isWorking')->first().oclAsType(EObject);
				
			end{
				theFeedBackSpec.events += result;
				seqOfMSE += result
			}
		}
	 	mapping inMM2::SystemAnalysis::ms2MSE() :FeedBack::ModelSpecificEvent 
		{
			name:= 'MSE_'+getNameOrUID(self.oclAsType(EObject))+'_ms';

				solverEvent := theMainBlock.elements[TimeModel::Clock]->select(c|c.name=getNameOrUID(self.oclAsType(EObject))+'_ms')->first().oclAsType(EObject);
				
			end{
				theFeedBackSpec.events += result;
				seqOfMSE += result
			}
		}
	 	mapping inMM3::MessageEnd::messEnd_occurs2MSE() :FeedBack::ModelSpecificEvent 
		{
			name:= 'MSE_'+getNameOrUID(self.oclAsType(EObject))+'_messEnd_occurs';

				caller := self.oclAsType(EObject);
				action := self.oclAsType(EObject).eClass().eAllOperations->select(op |op.name = "getLabel")->first();
				solverEvent := theMainBlock.elements[TimeModel::Clock]->select(c|c.name=getNameOrUID(self.oclAsType(EObject))+'_messEnd_occurs')->first().oclAsType(EObject);
				
			end{
				theFeedBackSpec.events += result;
				seqOfMSE += result
			}
		}
	 	mapping inMM3::ExecutionEnd::execEnd_occurs2MSE() :FeedBack::ModelSpecificEvent 
		{
			name:= 'MSE_'+getNameOrUID(self.oclAsType(EObject))+'_execEnd_occurs';

				caller := self.oclAsType(EObject);
				action := self.oclAsType(EObject).eClass().eAllOperations->select(op |op.name = "getLabel")->first();
				solverEvent := theMainBlock.elements[TimeModel::Clock]->select(c|c.name=getNameOrUID(self.oclAsType(EObject))+'_execEnd_occurs')->first().oclAsType(EObject);
				
			end{
				theFeedBackSpec.events += result;
				seqOfMSE += result
			}
		}
	 	mapping inMM3::AbstractEnd::abstractEnd_occurs2MSE() :FeedBack::ModelSpecificEvent 
		{
			name:= 'MSE_'+getNameOrUID(self.oclAsType(EObject))+'_abstractEnd_occurs';

				solverEvent := theMainBlock.elements[TimeModel::Clock]->select(c|c.name=getNameOrUID(self.oclAsType(EObject))+'_abstractEnd_occurs')->first().oclAsType(EObject);
				
			end{
				theFeedBackSpec.events += result;
				seqOfMSE += result
			}
		}
			
		






//priority stuff

mapping inMM1::Project::capellamodeller2Priority()  :Priority::PrioritySpecification  {
	thePrioritySpec := result;
	importedModel := object Priority::ImportStatement{
		importURI := getModelPath(ccsl.objectsOfType(TimeModel::Clock)->asSequence()->first().oclAsType(EObject));
	}; 
}	




