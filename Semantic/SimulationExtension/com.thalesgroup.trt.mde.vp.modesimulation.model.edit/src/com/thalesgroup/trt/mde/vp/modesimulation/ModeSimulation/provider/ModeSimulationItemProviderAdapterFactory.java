package com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.provider;

import com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.ModeSimulationFactory;
import com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.ModeSimulationPackage;

import com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.util.ModeSimulationAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.emf.edit.command.CommandParameter;

import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.polarsys.capella.core.data.sharedmodel.GenericPkg;
import org.polarsys.capella.core.data.sharedmodel.SharedmodelPackage;

import org.polarsys.capella.core.data.sharedmodel.util.SharedmodelSwitch;

import org.polarsys.kitalpha.emde.extension.ModelExtensionHelper;

import org.polarsys.kitalpha.emde.extension.edit.ChildCreationExtenderManager;

import org.polarsys.kitalpha.emde.model.EmdePackage;
import org.polarsys.kitalpha.emde.model.ExtensibleElement;

import org.polarsys.kitalpha.emde.model.edit.provider.NewChildDescriptorHelper;

import org.polarsys.kitalpha.emde.model.util.EmdeSwitch;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ModeSimulationItemProviderAdapterFactory extends
		ModeSimulationAdapterFactory implements ComposeableAdapterFactory,
		IChangeNotifier, IDisposable, IChildCreationExtender {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This helps manage the child creation extenders.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(
			ModeSimulationEditPlugin.INSTANCE, ModeSimulationPackage.eNS_URI);

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ModeSimulationItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.TransitionRuntimeData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionRuntimeDataItemProvider transitionRuntimeDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.TransitionRuntimeData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionRuntimeDataAdapter() {
		if (transitionRuntimeDataItemProvider == null) {
			transitionRuntimeDataItemProvider = new TransitionRuntimeDataItemProvider(
					this);
		}

		return transitionRuntimeDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.ModeRuntimeData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModeRuntimeDataItemProvider modeRuntimeDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.ModeRuntimeData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModeRuntimeDataAdapter() {
		if (modeRuntimeDataItemProvider == null) {
			modeRuntimeDataItemProvider = new ModeRuntimeDataItemProvider(this);
		}

		return modeRuntimeDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.GuardRuntimeData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GuardRuntimeDataItemProvider guardRuntimeDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.GuardRuntimeData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGuardRuntimeDataAdapter() {
		if (guardRuntimeDataItemProvider == null) {
			guardRuntimeDataItemProvider = new GuardRuntimeDataItemProvider(
					this);
		}

		return guardRuntimeDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.MachineRuntimeData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MachineRuntimeDataItemProvider machineRuntimeDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.MachineRuntimeData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMachineRuntimeDataAdapter() {
		if (machineRuntimeDataItemProvider == null) {
			machineRuntimeDataItemProvider = new MachineRuntimeDataItemProvider(
					this);
		}

		return machineRuntimeDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.ComponentRuntimeData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentRuntimeDataItemProvider componentRuntimeDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.ComponentRuntimeData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentRuntimeDataAdapter() {
		if (componentRuntimeDataItemProvider == null) {
			componentRuntimeDataItemProvider = new ComponentRuntimeDataItemProvider(
					this);
		}

		return componentRuntimeDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.FunctionRuntimeData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionRuntimeDataItemProvider functionRuntimeDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.FunctionRuntimeData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionRuntimeDataAdapter() {
		if (functionRuntimeDataItemProvider == null) {
			functionRuntimeDataItemProvider = new FunctionRuntimeDataItemProvider(
					this);
		}

		return functionRuntimeDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.FunctionalChainRuntimeData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionalChainRuntimeDataItemProvider functionalChainRuntimeDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.FunctionalChainRuntimeData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionalChainRuntimeDataAdapter() {
		if (functionalChainRuntimeDataItemProvider == null) {
			functionalChainRuntimeDataItemProvider = new FunctionalChainRuntimeDataItemProvider(
					this);
		}

		return functionalChainRuntimeDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.ExpressionRuntimeData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionRuntimeDataItemProvider expressionRuntimeDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.ExpressionRuntimeData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionRuntimeDataAdapter() {
		if (expressionRuntimeDataItemProvider == null) {
			expressionRuntimeDataItemProvider = new ExpressionRuntimeDataItemProvider(
					this);
		}

		return expressionRuntimeDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.ClockRuntimeData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClockRuntimeDataItemProvider clockRuntimeDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.ClockRuntimeData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClockRuntimeDataAdapter() {
		if (clockRuntimeDataItemProvider == null) {
			clockRuntimeDataItemProvider = new ClockRuntimeDataItemProvider(
					this);
		}

		return clockRuntimeDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.EventRuntimeData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventRuntimeDataItemProvider eventRuntimeDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.EventRuntimeData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventRuntimeDataAdapter() {
		if (eventRuntimeDataItemProvider == null) {
			eventRuntimeDataItemProvider = new EventRuntimeDataItemProvider(
					this);
		}

		return eventRuntimeDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.ActionRuntimeData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionRuntimeDataItemProvider actionRuntimeDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.thalesgroup.trt.mde.vp.modesimulation.ModeSimulation.ActionRuntimeData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionRuntimeDataAdapter() {
		if (actionRuntimeDataItemProvider == null) {
			actionRuntimeDataItemProvider = new ActionRuntimeDataItemProvider(
					this);
		}

		return actionRuntimeDataItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory
				.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>)
					|| (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IChildCreationExtender> getChildCreationExtenders() {
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Collection<?> getNewChildDescriptors(Object object,
			EditingDomain editingDomain) {
		return childCreationExtenderManager.getNewChildDescriptors(object,
				editingDomain);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResourceLocator getResourceLocator() {
		return childCreationExtenderManager;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (transitionRuntimeDataItemProvider != null)
			transitionRuntimeDataItemProvider.dispose();
		if (modeRuntimeDataItemProvider != null)
			modeRuntimeDataItemProvider.dispose();
		if (guardRuntimeDataItemProvider != null)
			guardRuntimeDataItemProvider.dispose();
		if (machineRuntimeDataItemProvider != null)
			machineRuntimeDataItemProvider.dispose();
		if (componentRuntimeDataItemProvider != null)
			componentRuntimeDataItemProvider.dispose();
		if (functionRuntimeDataItemProvider != null)
			functionRuntimeDataItemProvider.dispose();
		if (functionalChainRuntimeDataItemProvider != null)
			functionalChainRuntimeDataItemProvider.dispose();
		if (expressionRuntimeDataItemProvider != null)
			expressionRuntimeDataItemProvider.dispose();
		if (clockRuntimeDataItemProvider != null)
			clockRuntimeDataItemProvider.dispose();
		if (eventRuntimeDataItemProvider != null)
			eventRuntimeDataItemProvider.dispose();
		if (actionRuntimeDataItemProvider != null)
			actionRuntimeDataItemProvider.dispose();
	}

	/**
	 * A child creation extender for the {@link EmdePackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class EmdeChildCreationExtender implements
			IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends EmdeSwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors,
					EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}

			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseExtensibleElement(ExtensibleElement object) {
				// begin-extension-code
				if (ModelExtensionHelper
						.getInstance()
						.isExtensionModelDisabled(
								EcoreUtil.getRootContainer(object).eClass()
										.getEPackage().getNsURI(),
								"http://www.thalesgroup.com/trt/modesimulation/1.0.0")) { //$NON-NLS-1$
					return null;
				}
				// end-extension-code
				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							EmdePackage.Literals.EXTENSIBLE_ELEMENT__OWNED_EXTENSIONS,
							ModeSimulationFactory.eINSTANCE
									.createTransitionRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							EmdePackage.Literals.EXTENSIBLE_ELEMENT__OWNED_EXTENSIONS,
							ModeSimulationFactory.eINSTANCE
									.createModeRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							EmdePackage.Literals.EXTENSIBLE_ELEMENT__OWNED_EXTENSIONS,
							ModeSimulationFactory.eINSTANCE
									.createGuardRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							EmdePackage.Literals.EXTENSIBLE_ELEMENT__OWNED_EXTENSIONS,
							ModeSimulationFactory.eINSTANCE
									.createMachineRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							EmdePackage.Literals.EXTENSIBLE_ELEMENT__OWNED_EXTENSIONS,
							ModeSimulationFactory.eINSTANCE
									.createComponentRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							EmdePackage.Literals.EXTENSIBLE_ELEMENT__OWNED_EXTENSIONS,
							ModeSimulationFactory.eINSTANCE
									.createFunctionRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							EmdePackage.Literals.EXTENSIBLE_ELEMENT__OWNED_EXTENSIONS,
							ModeSimulationFactory.eINSTANCE
									.createFunctionalChainRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							EmdePackage.Literals.EXTENSIBLE_ELEMENT__OWNED_EXTENSIONS,
							ModeSimulationFactory.eINSTANCE
									.createExpressionRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							EmdePackage.Literals.EXTENSIBLE_ELEMENT__OWNED_EXTENSIONS,
							ModeSimulationFactory.eINSTANCE
									.createClockRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							EmdePackage.Literals.EXTENSIBLE_ELEMENT__OWNED_EXTENSIONS,
							ModeSimulationFactory.eINSTANCE
									.createEventRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							EmdePackage.Literals.EXTENSIBLE_ELEMENT__OWNED_EXTENSIONS,
							ModeSimulationFactory.eINSTANCE
									.createActionRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				return null;
			}

			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature,
					Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object,
				EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
			new CreationSwitch(result, editingDomain)
					.doSwitch((EObject) object);
			return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return ModeSimulationEditPlugin.INSTANCE;
		}
	}

	/**
	 * A child creation extender for the {@link SharedmodelPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class SharedmodelChildCreationExtender implements
			IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends SharedmodelSwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors,
					EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}

			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseGenericPkg(GenericPkg object) {
				// begin-extension-code
				if (ModelExtensionHelper
						.getInstance()
						.isExtensionModelDisabled(
								EcoreUtil.getRootContainer(object).eClass()
										.getEPackage().getNsURI(),
								"http://www.thalesgroup.com/trt/modesimulation/1.0.0")) { //$NON-NLS-1$
					return null;
				}
				// end-extension-code
				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							SharedmodelPackage.Literals.GENERIC_PKG__CAPELLA_ELEMENTS,
							ModeSimulationFactory.eINSTANCE
									.createTransitionRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							SharedmodelPackage.Literals.GENERIC_PKG__CAPELLA_ELEMENTS,
							ModeSimulationFactory.eINSTANCE
									.createModeRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							SharedmodelPackage.Literals.GENERIC_PKG__CAPELLA_ELEMENTS,
							ModeSimulationFactory.eINSTANCE
									.createGuardRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							SharedmodelPackage.Literals.GENERIC_PKG__CAPELLA_ELEMENTS,
							ModeSimulationFactory.eINSTANCE
									.createMachineRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							SharedmodelPackage.Literals.GENERIC_PKG__CAPELLA_ELEMENTS,
							ModeSimulationFactory.eINSTANCE
									.createComponentRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							SharedmodelPackage.Literals.GENERIC_PKG__CAPELLA_ELEMENTS,
							ModeSimulationFactory.eINSTANCE
									.createFunctionRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							SharedmodelPackage.Literals.GENERIC_PKG__CAPELLA_ELEMENTS,
							ModeSimulationFactory.eINSTANCE
									.createFunctionalChainRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							SharedmodelPackage.Literals.GENERIC_PKG__CAPELLA_ELEMENTS,
							ModeSimulationFactory.eINSTANCE
									.createExpressionRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							SharedmodelPackage.Literals.GENERIC_PKG__CAPELLA_ELEMENTS,
							ModeSimulationFactory.eINSTANCE
									.createClockRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							SharedmodelPackage.Literals.GENERIC_PKG__CAPELLA_ELEMENTS,
							ModeSimulationFactory.eINSTANCE
									.createEventRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				// begin-extension-code
				{
					CommandParameter commandParameter = createChildParameter(
							SharedmodelPackage.Literals.GENERIC_PKG__CAPELLA_ELEMENTS,
							ModeSimulationFactory.eINSTANCE
									.createActionRuntimeData());
					if (NewChildDescriptorHelper.isValidCommand(object,
							commandParameter)) {
						newChildDescriptors.add(commandParameter);
					}
				}
				// end-extension-code

				return null;
			}

			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature,
					Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object,
				EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
			new CreationSwitch(result, editingDomain)
					.doSwitch((EObject) object);
			return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return ModeSimulationEditPlugin.INSTANCE;
		}
	}

}