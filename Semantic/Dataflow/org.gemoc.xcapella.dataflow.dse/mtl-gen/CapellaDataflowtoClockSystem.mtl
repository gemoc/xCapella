[comment encoding = UTF-8 /]

[module generate('http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation', 
	'http://www.eclipse.org/emf/2002/Ecore', 
	'http://org.gemoc.moccml/1.0', 
	'http://fr.inria.aoste.timemodel',
	'http://org.gemoc.moccml.fsmmodel/1.0',
	'http://www.polarsys.org/capella/core/modeller/0.8.0','http://www.polarsys.org/kitalpha/emde/1.0.0','http://www.thalesgroup.com/trt/modesimulation/1.0.0','http://www.polarsys.org/capella/core/fa/0.8.0') ]

[template public generate(aProject : Project)]
[comment @main/]
[file (aProject.name+'_withMoC-ModeFunctionalChain.clocksystem', false, 'UTF-8')]

"Some global constants"
|system moccmllibs ccsllibs|
"MoCCML librairies specifications" 
moccmllibs:={ #ModeFunctionalChain -> {
		#NoFunctionalChainIfNotAvailableInModeDef -> ['['/]:s   :enterMode :leaveMode :anyfunctionalChainEvent|
	
				s caseOf: {
							['['/]0[']'/] -> ['['/]{
								0 -> 1 when: {} 
							}[']'/]..

							['['/]1[']'/] -> ['['/]{
								1 -> 2 when: {enterMode} 
							}
							[']'/].

							['['/]2[']'/] -> ['['/]{
								2 -> 1 when: {leaveMode}. 
								2 -> 2 when: {anyfunctionalChainEvent} 
							}
							[']'/].

					
					} "end caseof"
 
			[']'/]. "end #NoFunctionalChainIfNotAvailableInModeDef"

		#FunctionLifeCycleDef -> ['['/]:s   :Function_lifeCycle_enable :Function_lifeCycle_disable :Function_lifeCycle_start :Function_lifeCycle_stop :Function_lifeCycle_isRunning|
	
				s caseOf: {
							['['/]0[']'/] -> ['['/]{
								0 -> 1 when: {} 
							}[']'/]..

							['['/]1[']'/] -> ['['/]{
								1 -> 2 when: {Function_lifeCycle_enable} 
							}
							[']'/].

							['['/]2[']'/] -> ['['/]{
								2 -> 3 when: {Function_lifeCycle_start}. 
								2 -> 1 when: {Function_lifeCycle_disable} 
							}
							[']'/].

							['['/]3[']'/] -> ['['/]{
								3 -> 3 when: {Function_lifeCycle_isRunning}. 
								3 -> 2 when: {Function_lifeCycle_stop} 
							}
							[']'/].

					
					} "end caseof"
 
			[']'/]. "end #FunctionLifeCycleDef"


} asDictionary }.

	"CCSL librairies specifications"


"Instanciation" 


system := ClockSystem named: '[aProject.name/]_withMoC-ModeFunctionalChain'.
system addLibrary:moccmllibs asDictionary.
"system addLibs:ccsllibs asDictionary."

[for (element : AbstractFunction| aProject.eAllContents(AbstractFunction))]
"clocks for AbstractFunction [element.name/]" 
	system addClocks: #(makeactive[element.name /] start[element.name /] run[element.name /] stop[element.name /] makeinactive[element.name /] ).
"internal clocks for AbstractFunction [element.name/]" 
    system addInternalClocks: #(anyAssociatedFCactivation[element.name /] anyAssociatedFCdeactivation[element.name /] ).
[/for]
[for (element : FunctionalChain| aProject.eAllContents(FunctionalChain))]
"clocks for FunctionalChain [element.name/]" 
	system addClocks: #(activate[element.name /] deactivate[element.name /] ).
[/for]
[for (element : FunctionalExchange| aProject.eAllContents(FunctionalExchange))]
"clocks for FunctionalExchange [element.name/]" 
	system addClocks: #().
[/for]

[for (element : AbstractFunction| aProject.eAllContents(AbstractFunction))]
"expressions used by  AbstractFunction [element.name/]" 
	system allUnion: #([for (ne : AbstractFunction | element.oclAsType(ecore::EObject).eContainer().oclAsType(AbstractFunction).ownedFunctionalChains->select(fc | (fc).enactedFunctions->exists(ef | (ef) = self)))]activate[ne.name/] [/for]) named: #anyAssociatedFCactivation[element.name/]. 
	system allUnion: #([for (ne : AbstractFunction | (element.oclAsType(ecore::EObject).eContainer().oclAsType(AbstractFunction).ownedFunctionalChains->select(fc | (fc).enactedFunctions->exists(ef | (ef) = self))))]deactivate[ne.name/] [/for]) named: #anyAssociatedFCdeactivation[element.name/]. 
"relations for AbstractFunction [element.name/]" 
	"functionLifeCycle in AbstractFunction [element.name/]"
	system
		library: #TODO: complete EclServices.java, ConstraintCS.getLibraryName() for expression type InfixExpCS
		relation: #TODO: complete EclServices.java, ConstraintCS.getRelationName() for expression type InfixExpCS
		clocks: #(TODO: complete EclServices.java, ConstraintCS.getClockNamesListedAndSepBySep())
		constants: {}
		variables: {TODO: complete EclServices.java, ConstraintCS.getVariablesListedAndSepByDot() for expression type InfixExpCS}.

	"activatedIfOneAssociatedFCactivated in AbstractFunction [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(makeactive[element.name/] anyAssociatedFCactivation[element.name/]).

	"deactivatedIfOneAssociatedFCdeactivated in AbstractFunction [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(makeinactive[element.name/] anyAssociatedFCdeactivation[element.name/]).

[/for]
[for (element : FunctionalChain| aProject.eAllContents(FunctionalChain))]
"relations for FunctionalChain [element.name/]" 
	"activateAltDeactivate in FunctionalChain [element.name/]"
		system library: #Kernel relation: #Alternates clocks: #(activate[element.name/] deactivate[element.name/]).

[/for]
[for (element : FunctionalExchange| aProject.eAllContents(FunctionalExchange))]
"relations for FunctionalExchange [element.name/]" 
	"SourcePrecedesTarget in FunctionalExchange [element.name/]"
	system
		library: #TODO: complete EclServices.java, ConstraintCS.getLibraryName() for expression type NestedExpCS
		relation: #TODO: complete EclServices.java, ConstraintCS.getRelationName() for expression type NestedExpCS
		clocks: #(TODO: complete EclServices.java, ConstraintCS.getClockNamesListedAndSepBySep())
		constants: {}
		variables: {TODO: complete EclServices.java, ConstraintCS.getVariablesListedAndSepByDot() for expression type NestedExpCS}.

[/for]
[/file]
[file ('ClkSysFunctionTest.clocksystem', false, 'UTF-8')]
SimpleSDF example1 system
[/file]
[/template]
