
"Some global constants"
|system moccmllibs ccsllibs|
"MoCCML librairies specifications" 
moccmllibs:={ #ModeFunctionalChain -> {
		#NoFunctionalChainIfNotAvailableInModeDef -> [ :s   :enterMode :leaveMode :anyfunctionalChainEvent|
	
				s caseOf: {
							[ 0] -> [{
								0 -> 1 when: {} 
							}] .
							[1] -> [{
								1 -> 2 when: {enterMode} 
							}
							].

							[2] -> [{
								2 -> 1 when: {leaveMode}. 
								2 -> 2 when: {anyfunctionalChainEvent} 
							}
							].

					
					} "end caseof"
 
			]. "end #NoFunctionalChainIfNotAvailableInModeDef"

		#FunctionLifeCycleDef -> [ :s   :Function_lifeCycle_enable :Function_lifeCycle_disable :Function_lifeCycle_start :Function_lifeCycle_stop :Function_lifeCycle_isRunning|
	
				s caseOf: {
							[ 0] -> [{
								0 -> 1 when: {} 
							}] .
							[1] -> [{
								1 -> 2 when: {Function_lifeCycle_enable} 
							}
							].

							[2] -> [{
								2 -> 3 when: {Function_lifeCycle_start}. 
								2 -> 1 when: {Function_lifeCycle_disable} 
							}
							].

							[3] -> [{
								3 -> 3 when: {Function_lifeCycle_isRunning}. 
								3 -> 2 when: {Function_lifeCycle_stop} 
							}
							].

					
					} "end caseof"
 
			]. "end #FunctionLifeCycleDef"


} asDictionary }.

	"CCSL librairies specifications"

system := ClockSystem named: 'aProject_withMoC-ModeFunctionalChain'.
system addLibrary:moccmllibs asDictionary.

