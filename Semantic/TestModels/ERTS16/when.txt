		mapping inMM2::Transition::evaluate12ActionFeedBack() :FeedBack::When 
			when {  }
		{
			action := object FeedBack::Force{
				kind := ForceKind::Absence;
				untilTrigger := seqOfMSE->select(mse | mse.name = 'MSE_'+self.name+'_evaluatedTrue')->first();
				eventToBeForced := seqOfMSE->select(mse | mse.name = 'MSE_'+self.name+'_evaluatedFalse')->first();
				
			};
			condition := object FeedBack::ActionResultCondition{
				operator := ComparisonOperator::equals;
				comparisonValue := true;
			};
			source := seqOfMSE->select(mse | mse.name = 'MSE_'+self.name+'_evaluate')->first();
			
			end{
				theFeedBackSpec.whenStatements += result;
			}
		}
		mapping inMM2::Transition::evaluate22ActionFeedBack() :FeedBack::When 
			when {  }
		{
			action := object FeedBack::Force{
				kind := ForceKind::Absence;
				untilTrigger := seqOfMSE->select(mse | mse.name = 'MSE_'+self.name+'_evaluatedFalse')->first();
				eventToBeForced := seqOfMSE->select(mse | mse.name = 'MSE_'+self.name+'_evaluatedTrue')->first();
				
			};
			condition := object FeedBack::ActionResultCondition{
				operator := ComparisonOperator::equals;
				comparisonValue := false;
			};
			source := seqOfMSE->select(mse | mse.name = 'MSE_'+self.name+'_evaluate')->first();
			dump(self.name);
			dump(seqOfMSE);
			dump(action);
			dump(condition);
			dump(source);
			
			end{
				theFeedBackSpec.whenStatements += result;
			}
		}
