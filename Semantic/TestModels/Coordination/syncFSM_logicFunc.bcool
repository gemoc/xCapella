xcapella_coordination

ImportLib "platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib" 
ImportLib "platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib"
ImportLib "platform:/resource/Coordination/facilities.bcoollib"
ImportLib "platform:/resource/Coordination/bcoollib.ccslLib"
ImportInterface "platform:/plugin/com.thalesgroup.trt.mocc.modemachine.dse/ecl/modemachine.ecl" as i_Mode 
ImportInterface "platform:/plugin/org.gemoc.xcapella.dataflow.dse/ecl/CapellaDataflow.ecl" as i_DF


 

Spec test

Operator MatchingandCoordinationSharedEventsActivate (dse_entering : i_Mode::entering, dse_activate : i_DF::activate) 
	MatchingCorrespondance: when "(dse_entering.oclAsType(Mode_).enterActions->first().oclAsType(BroadcastEventAction).name) = dse_activate.name"; 
	CoordinationRule:  facilities.RendezVous(dse_entering,dse_activate)
end operator;

Operator MatchingandCoordinationSharedEventsDeactivate (dse_leaving : i_Mode::leaving, dse_deactivate : i_DF::deactivate) 
	MatchingCorrespondance: when "(dse_leaving.oclAsType(Mode_).enterActions->first().oclAsType(BroadcastEventAction).name) = dse_deactivate.name"; 
	CoordinationRule:  facilities.RendezVous(dse_leaving,dse_deactivate)
end operator;


//Operator ModeEnteringActivateFunctionalChain (enter : i_Mode::entering, leave : i_Mode::leaving, activate : i_DF::activate) 
//	MatchingCorrespondance: when "enter.availableFunctionalChains -> exists(fc | fc = activate)";
//	CoordinationRule: facilities3.RendezVous(activate , enter , leave)
//end operator;
