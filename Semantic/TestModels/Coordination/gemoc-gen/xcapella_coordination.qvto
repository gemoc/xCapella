import fr.inria.aoste.timesquare.ecl.EclQVToHelper;

	
modeltype Ecore uses 'http://www.eclipse.org/emf/2002/Ecore';
//modeltype pivot uses 'http://www.eclipse.org/ocl/3.1.0/Pivot';

					modeltype inMM11 uses 'http://www.polarsys.org/capella/core/modeller/0.8.0';
					modeltype inMM12 uses 'http://www.polarsys.org/capella/core/cs/0.8.0';
					modeltype inMM13 uses 'http://www.polarsys.org/capella/core/information/0.8.0';
					modeltype inMM14 uses 'http://www.thalesgroup.com/trt/mode/1.0.0';
					modeltype inMM15 uses 'http://www.polarsys.org/kitalpha/emde/1.0.0';
					modeltype inMM16 uses 'http://www.thalesgroup.com/trt/time/1.0.0';
					modeltype inMM17 uses 'http://www.thalesgroup.com/trt/expression/1.0.0';
					modeltype inMM18 uses 'http://www.thalesgroup.com/trt/al/1.0.0';
					modeltype inMM19 uses 'http://www.thalesgroup.com/trt/modesimulation/1.0.0';
					modeltype inMM110 uses 'http://www.polarsys.org/capella/common/behavior/0.8.0';
					modeltype inMM111 uses 'http://www.polarsys.org/capella/core/fa/0.8.0';
					modeltype inMM112 uses 'http://www.polarsys.org/capella/core/ctx/0.8.0';
					modeltype inMM21 uses 'http://www.polarsys.org/capella/core/modeller/0.8.0';
					modeltype inMM22 uses 'http://www.polarsys.org/kitalpha/emde/1.0.0';
					modeltype inMM23 uses 'http://www.thalesgroup.com/trt/modesimulation/1.0.0';
					modeltype inMM24 uses 'http://www.polarsys.org/capella/core/fa/0.8.0';
modeltype ocl uses 'http://www.eclipse.org/ocl/3.1.0/CompleteOCLCST';

modeltype QVT uses 'http://www.eclipse.org/QVT/1.0.0/Operational';//http://www.eclipse.org/m2m/qvt/oml/1.0.0/Stdlib';//http://www.eclipse.org/qvt/1.0/ImperativeOCL'; 
modeltype TimeModel uses 'http://fr.inria.aoste.timemodel';

	

transformation doxcapella_coordination_To_CCSL(
inM1 : inMM11,
inM2 : inMM21,
 inout outCCSLModel : TimeModel);

// properties to parametrize the application of operators
		configuration property IsMatchingandCoordinationSharedEventsExecuted : Boolean;

// property to apply all the operators
configuration property ApplyAll : Boolean;
// property to add libraries when it is invoked from qvt
configuration property IsInvokedfromAnt : Boolean;


configuration property inM1MoCCPath : String;
//property inM1MoCCPath : String = getModelPath(inM1.rootObjects()->asSequence()->first().oclAsType(EObject)).substring(1, getModelPath(inM1.rootObjects()->asSequence()->first().oclAsType(EObject)).lastIndexOf('.')-1)+'_MoCC.extendedCCSL';
property inM1Clocks	:	Sequence(TimeModel::Clock) = Sequence{};
query retrieveinM1MoCCClocks() {
	inM1Clocks += getLibObjects(inM1MoCCPath)[TimeModel::Clock];
	
	return;
}
configuration property inM2MoCCPath : String;
//property inM2MoCCPath : String = getModelPath(inM2.rootObjects()->asSequence()->first().oclAsType(EObject)).substring(1, getModelPath(inM2.rootObjects()->asSequence()->first().oclAsType(EObject)).lastIndexOf('.')-1)+'_MoCC.extendedCCSL';
property inM2Clocks	:	Sequence(TimeModel::Clock) = Sequence{};
query retrieveinM2MoCCClocks() {
	inM2Clocks += getLibObjects(inM2MoCCPath)[TimeModel::Clock];
	
	return;
}


property theCCSLSpec			:TimeModel::CCSLModel::ClockConstraintSystem = null;
property theMainBlock			:TimeModel::CCSLModel::Block				 = null;
property theSubBlock 			:TimeModel::CCSLModel::Block				 = null;

property Kernel_Integer 	: TimeModel::BasicType::Type		= null;
property Kernel_Clock_Type 	: TimeModel::BasicType::Type		= null;

property seqOfRelationDeclaration :	Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration)    = Sequence{};
property seqOfAbstractEntity :		Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity)    = Sequence{};
property seqOfExpressionDeclaration :	Sequence(TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration)    = Sequence{};



		

		
	

		property MM11_seqOfenteringAbstractModeContext :	Sequence(inMM14::AbstractMode) = Sequence{};
		property MM11_seqOfenteringAbstractModeReferedElement :	Sequence(EObject) = Sequence{};

			query inMM14::AbstractMode::getenteringMSEofMM1() {
			MM11_seqOfenteringAbstractModeContext += self.oclAsType(inMM14::AbstractMode);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM11_seqOfenteringAbstractModeReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	

		
	

		property MM11_seqOfleavingAbstractModeContext :	Sequence(inMM14::AbstractMode) = Sequence{};
		property MM11_seqOfleavingAbstractModeReferedElement :	Sequence(EObject) = Sequence{};

			query inMM14::AbstractMode::getleavingMSEofMM1() {
			MM11_seqOfleavingAbstractModeContext += self.oclAsType(inMM14::AbstractMode);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM11_seqOfleavingAbstractModeReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	

		
	

		property MM11_seqOfstartModeMachineContext :	Sequence(inMM14::ModeMachine) = Sequence{};
		property MM11_seqOfstartModeMachineReferedElement :	Sequence(EObject) = Sequence{};

			query inMM14::ModeMachine::getstartMSEofMM1() {
			MM11_seqOfstartModeMachineContext += self.oclAsType(inMM14::ModeMachine);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM11_seqOfstartModeMachineReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	

		
	

		property MM11_seqOfanyEventOrTimeModeMachineContext :	Sequence(inMM14::ModeMachine) = Sequence{};
		property MM11_seqOfanyEventOrTimeModeMachineReferedElement :	Sequence(EObject) = Sequence{};

			query inMM14::ModeMachine::getanyEventOrTimeMSEofMM1() {
			MM11_seqOfanyEventOrTimeModeMachineContext += self.oclAsType(inMM14::ModeMachine);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM11_seqOfanyEventOrTimeModeMachineReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	

		
	

		property MM11_seqOffireTransitionContext :	Sequence(inMM14::Transition) = Sequence{};
		property MM11_seqOffireTransitionReferedElement :	Sequence(EObject) = Sequence{};

			query inMM14::Transition::getfireMSEofMM1() {
			MM11_seqOffireTransitionContext += self.oclAsType(inMM14::Transition);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM11_seqOffireTransitionReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	

		
	

		property MM11_seqOfresetTransitionContext :	Sequence(inMM14::Transition) = Sequence{};
		property MM11_seqOfresetTransitionReferedElement :	Sequence(EObject) = Sequence{};

			query inMM14::Transition::getresetMSEofMM1() {
			MM11_seqOfresetTransitionContext += self.oclAsType(inMM14::Transition);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM11_seqOfresetTransitionReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	

		
	

		property MM11_seqOfevaluateTransitionContext :	Sequence(inMM14::Transition) = Sequence{};
		property MM11_seqOfevaluateTransitionReferedElement :	Sequence(EObject) = Sequence{};

			query inMM14::Transition::getevaluateMSEofMM1() {
			MM11_seqOfevaluateTransitionContext += self.oclAsType(inMM14::Transition);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM11_seqOfevaluateTransitionReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	

		
	

		property MM11_seqOfevaluatedTrueTransitionContext :	Sequence(inMM14::Transition) = Sequence{};
		property MM11_seqOfevaluatedTrueTransitionReferedElement :	Sequence(EObject) = Sequence{};

			query inMM14::Transition::getevaluatedTrueMSEofMM1() {
			MM11_seqOfevaluatedTrueTransitionContext += self.oclAsType(inMM14::Transition);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM11_seqOfevaluatedTrueTransitionReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	

		
	

		property MM11_seqOfevaluatedFalseTransitionContext :	Sequence(inMM14::Transition) = Sequence{};
		property MM11_seqOfevaluatedFalseTransitionReferedElement :	Sequence(EObject) = Sequence{};

			query inMM14::Transition::getevaluatedFalseMSEofMM1() {
			MM11_seqOfevaluatedFalseTransitionContext += self.oclAsType(inMM14::Transition);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM11_seqOfevaluatedFalseTransitionReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	

		
	

		property MM11_seqOfticksClockContext :	Sequence(inMM16::Clock) = Sequence{};
		property MM11_seqOfticksClockReferedElement :	Sequence(EObject) = Sequence{};

			query inMM16::Clock::getticksMSEofMM1() {
			MM11_seqOfticksClockContext += self.oclAsType(inMM16::Clock);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM11_seqOfticksClockReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	

		
	

		property MM11_seqOfoccursEventExpressionContext :	Sequence(inMM17::EventExpression) = Sequence{};
		property MM11_seqOfoccursEventExpressionReferedElement :	Sequence(EObject) = Sequence{};

			query inMM17::EventExpression::getoccursMSEofMM1() {
			MM11_seqOfoccursEventExpressionContext += self.oclAsType(inMM17::EventExpression);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM11_seqOfoccursEventExpressionReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	

		
	

		property MM11_seqOfoccursAbstractEventContext :	Sequence(inMM110::AbstractEvent) = Sequence{};
		property MM11_seqOfoccursAbstractEventReferedElement :	Sequence(EObject) = Sequence{};

			query inMM110::AbstractEvent::getoccursMSEofMM1() {
			MM11_seqOfoccursAbstractEventContext += self.oclAsType(inMM110::AbstractEvent);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM11_seqOfoccursAbstractEventReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	

		
	

		property MM11_seqOfstartSystemContext :	Sequence(inMM112::System) = Sequence{};
		property MM11_seqOfstartSystemReferedElement :	Sequence(EObject) = Sequence{};

			query inMM112::System::getstartMSEofMM1() {
			MM11_seqOfstartSystemContext += self.oclAsType(inMM112::System);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM11_seqOfstartSystemReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	


		

		
	

		property MM21_seqOfactivateFunctionalChainContext :	Sequence(inMM24::FunctionalChain) = Sequence{};
		property MM21_seqOfactivateFunctionalChainReferedElement :	Sequence(EObject) = Sequence{};

			query inMM24::FunctionalChain::getactivateMSEofMM2() {
			MM21_seqOfactivateFunctionalChainContext += self.oclAsType(inMM24::FunctionalChain);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM21_seqOfactivateFunctionalChainReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	

		
	

		property MM21_seqOfdeactivateFunctionalChainContext :	Sequence(inMM24::FunctionalChain) = Sequence{};
		property MM21_seqOfdeactivateFunctionalChainReferedElement :	Sequence(EObject) = Sequence{};

			query inMM24::FunctionalChain::getdeactivateMSEofMM2() {
			MM21_seqOfdeactivateFunctionalChainContext += self.oclAsType(inMM24::FunctionalChain);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM21_seqOfdeactivateFunctionalChainReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	

		
	

		property MM21_seqOfanyFunctionStartFunctionalChainContext :	Sequence(inMM24::FunctionalChain) = Sequence{};
		property MM21_seqOfanyFunctionStartFunctionalChainReferedElement :	Sequence(EObject) = Sequence{};

			query inMM24::FunctionalChain::getanyFunctionStartMSEofMM2() {
			MM21_seqOfanyFunctionStartFunctionalChainContext += self.oclAsType(inMM24::FunctionalChain);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM21_seqOfanyFunctionStartFunctionalChainReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	

		
	

		property MM21_seqOfinitAbstractFunctionContext :	Sequence(inMM24::AbstractFunction) = Sequence{};
		property MM21_seqOfinitAbstractFunctionReferedElement :	Sequence(EObject) = Sequence{};

			query inMM24::AbstractFunction::getinitMSEofMM2() {
			MM21_seqOfinitAbstractFunctionContext += self.oclAsType(inMM24::AbstractFunction);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM21_seqOfinitAbstractFunctionReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	

		
	

		property MM21_seqOfmakeactiveAbstractFunctionContext :	Sequence(inMM24::AbstractFunction) = Sequence{};
		property MM21_seqOfmakeactiveAbstractFunctionReferedElement :	Sequence(EObject) = Sequence{};

			query inMM24::AbstractFunction::getmakeactiveMSEofMM2() {
			MM21_seqOfmakeactiveAbstractFunctionContext += self.oclAsType(inMM24::AbstractFunction);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM21_seqOfmakeactiveAbstractFunctionReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	

		
	

		property MM21_seqOfmakeinactiveAbstractFunctionContext :	Sequence(inMM24::AbstractFunction) = Sequence{};
		property MM21_seqOfmakeinactiveAbstractFunctionReferedElement :	Sequence(EObject) = Sequence{};

			query inMM24::AbstractFunction::getmakeinactiveMSEofMM2() {
			MM21_seqOfmakeinactiveAbstractFunctionContext += self.oclAsType(inMM24::AbstractFunction);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM21_seqOfmakeinactiveAbstractFunctionReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	

		
	

		property MM21_seqOfstartAbstractFunctionContext :	Sequence(inMM24::AbstractFunction) = Sequence{};
		property MM21_seqOfstartAbstractFunctionReferedElement :	Sequence(EObject) = Sequence{};

			query inMM24::AbstractFunction::getstartMSEofMM2() {
			MM21_seqOfstartAbstractFunctionContext += self.oclAsType(inMM24::AbstractFunction);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM21_seqOfstartAbstractFunctionReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	

		
	

		property MM21_seqOfstopAbstractFunctionContext :	Sequence(inMM24::AbstractFunction) = Sequence{};
		property MM21_seqOfstopAbstractFunctionReferedElement :	Sequence(EObject) = Sequence{};

			query inMM24::AbstractFunction::getstopMSEofMM2() {
			MM21_seqOfstopAbstractFunctionContext += self.oclAsType(inMM24::AbstractFunction);
			//warning here, at the end it will be an eoperation..., i.e. a DSA
			MM21_seqOfstopAbstractFunctionReferedElement += self.oclAsType(EObject); //before: evt.ownedType.oclAsType(EventType).referedElement
			return;
			}
	



query identifyUserRelations() {
	var kernelTypes :  	Sequence(TimeModel::BasicType::Type) := Sequence{};

		
				seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
				seqOfAbstractEntity				+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
				seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
				kernelTypes 					+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::BasicType::Type];

		
		
				seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
				seqOfAbstractEntity				+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
				seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
				kernelTypes 					+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::BasicType::Type];

		
		
				seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/org.gemoc.sample.smcube.moc.lib/ccsl/SMCubeMoC.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
				seqOfAbstractEntity				+= getLibObjects("platform:/plugin/org.gemoc.sample.smcube.moc.lib/ccsl/SMCubeMoC.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
				seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/org.gemoc.sample.smcube.moc.lib/ccsl/SMCubeMoC.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
				kernelTypes 					+= getLibObjects("platform:/plugin/org.gemoc.sample.smcube.moc.lib/ccsl/SMCubeMoC.ccslLib")[TimeModel::BasicType::Type];

		
		
				seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/org.gemoc.sample.smcube.moc.lib/ccsl/SMCubeMoCC.moccml")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
				seqOfAbstractEntity				+= getLibObjects("platform:/plugin/org.gemoc.sample.smcube.moc.lib/ccsl/SMCubeMoCC.moccml")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
				seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/org.gemoc.sample.smcube.moc.lib/ccsl/SMCubeMoCC.moccml")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
				kernelTypes 					+= getLibObjects("platform:/plugin/org.gemoc.sample.smcube.moc.lib/ccsl/SMCubeMoCC.moccml")[TimeModel::BasicType::Type];

		
		
				seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
				seqOfAbstractEntity				+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
				seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
				kernelTypes 					+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::BasicType::Type];

		
		
				seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
				seqOfAbstractEntity				+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
				seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
				kernelTypes 					+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::BasicType::Type];

		
		
				seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.dataflowmode.constraint.moccml/mocc/ModeFunctionalChain.moccml")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
				seqOfAbstractEntity				+= getLibObjects("platform:/plugin/fr.inria.aoste.dataflowmode.constraint.moccml/mocc/ModeFunctionalChain.moccml")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
				seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.dataflowmode.constraint.moccml/mocc/ModeFunctionalChain.moccml")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
				kernelTypes 					+= getLibObjects("platform:/plugin/fr.inria.aoste.dataflowmode.constraint.moccml/mocc/ModeFunctionalChain.moccml")[TimeModel::BasicType::Type];

		


		seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
		seqOfAbstractEntity				+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
		seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
		kernelTypes 					+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib")[TimeModel::BasicType::Type];
		seqOfRelationDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration];
		seqOfAbstractEntity				+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity];
		seqOfExpressionDeclaration		+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::CCSLModel::ClockExpressionAndRelation::ExpressionDeclaration];
		kernelTypes 					+= getLibObjects("platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib")[TimeModel::BasicType::Type];

	Kernel_Integer 					:= kernelTypes[name='int']->asSequence()->first();
	Kernel_Clock_Type				:= kernelTypes[name='clock']->asSequence()->first();	

	return;
}


//usefull function :)
	mapping Real::Real2Integer(n: String) :TimeModel::BasicType::IntegerElement {
		name:= n;
		type:= Kernel_Integer;
		value := self.round();

		end{
			theSubBlock.elements += result;
		}
	}

//really usefull function
	mapping NewClock (n: String) :TimeModel::Clock{
		name:= n;
		type:= Kernel_Clock_Type;
		end {
			theSubBlock.elements += result;
		}
	}


main() {
	var tmp : Integer;

	identifyUserRelations();
		retrieveinM1MoCCClocks();
		retrieveinM2MoCCClocks();


				inM1.objectsOfType(inMM14::AbstractMode).getenteringMSEofMM1();
				inM1.objectsOfType(inMM14::AbstractMode).getleavingMSEofMM1();
				inM1.objectsOfType(inMM14::ModeMachine).getstartMSEofMM1();
				inM1.objectsOfType(inMM14::ModeMachine).getanyEventOrTimeMSEofMM1();
				inM1.objectsOfType(inMM14::Transition).getfireMSEofMM1();
				inM1.objectsOfType(inMM14::Transition).getresetMSEofMM1();
				inM1.objectsOfType(inMM14::Transition).getevaluateMSEofMM1();
				inM1.objectsOfType(inMM14::Transition).getevaluatedTrueMSEofMM1();
				inM1.objectsOfType(inMM14::Transition).getevaluatedFalseMSEofMM1();
				inM1.objectsOfType(inMM16::Clock).getticksMSEofMM1();
				inM1.objectsOfType(inMM17::EventExpression).getoccursMSEofMM1();
				inM1.objectsOfType(inMM110::AbstractEvent).getoccursMSEofMM1();
				inM1.objectsOfType(inMM112::System).getstartMSEofMM1();
				inM2.objectsOfType(inMM24::FunctionalChain).getactivateMSEofMM2();
				inM2.objectsOfType(inMM24::FunctionalChain).getdeactivateMSEofMM2();
				inM2.objectsOfType(inMM24::FunctionalChain).getanyFunctionStartMSEofMM2();
				inM2.objectsOfType(inMM24::AbstractFunction).getinitMSEofMM2();
				inM2.objectsOfType(inMM24::AbstractFunction).getmakeactiveMSEofMM2();
				inM2.objectsOfType(inMM24::AbstractFunction).getmakeinactiveMSEofMM2();
				inM2.objectsOfType(inMM24::AbstractFunction).getstartMSEofMM2();
				inM2.objectsOfType(inMM24::AbstractFunction).getstopMSEofMM2();
		
	
		
		if outCCSLModel.objectsOfType(TimeModel::CCSLModel::ClockConstraintSystem)->isEmpty() then
	 		map xcapella_coordination2CCSLMainBlock()
		else { 
	    		theCCSLSpec := outCCSLModel.objectsOfType(TimeModel::CCSLModel::ClockConstraintSystem)->asSequence()->first();
	    		theMainBlock := theCCSLSpec.superBlock;

					// This adds the libraries
					if IsInvokedfromAnt  then {

					theCCSLSpec.imports+= object TimeModel::ImportStatement{
						importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib';
						alias := 'lib_1';	
					}; 
					theCCSLSpec.imports+= object TimeModel::ImportStatement{
						importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib';
						alias := 'lib_2';	
					}; 




							theCCSLSpec.imports+= object TimeModel::ImportStatement{
							importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib';
							alias := 'model_1_1';	
						}; 


							theCCSLSpec.imports+= object TimeModel::ImportStatement{
							importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib';
							alias := 'model_1_2';	
						}; 


							theCCSLSpec.imports+= object TimeModel::ImportStatement{
							importURI := 'platform:/plugin/org.gemoc.sample.smcube.moc.lib/ccsl/SMCubeMoC.ccslLib';
							alias := 'model_1_3';	
						}; 

							theCCSLSpec.imports+= object TimeModel::ImportStatement{
							importURI := 'platform:/plugin/org.gemoc.sample.smcube.moc.lib/ccsl/SMCubeMoCC.moccml';
							alias := 'model_1_4';	
						}; 

							theCCSLSpec.imports+= object TimeModel::ImportStatement{
							importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib';
							alias := 'model_2_1';	
						}; 


							theCCSLSpec.imports+= object TimeModel::ImportStatement{
							importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib';
							alias := 'model_2_2';	
						}; 


							theCCSLSpec.imports+= object TimeModel::ImportStatement{
							importURI := 'platform:/plugin/fr.inria.aoste.dataflowmode.constraint.moccml/mocc/ModeFunctionalChain.moccml';
							alias := 'model_2_3';	
						}; 
					}endif;
			}endif;
	
		map xcapella_coordination2CCSLSubBlock();
				
		theMainBlock.subBlock += theSubBlock;
		theSubBlock.container := theMainBlock;




	
	if (IsMatchingandCoordinationSharedEventsExecuted) or (ApplyAll) then { 
			
				 MM11_seqOfenteringAbstractModeContext-> forEach (dse1){ 


			
			
				 MM21_seqOfmakeactiveAbstractFunctionContext-> forEach (dse2){ 


			

		if ((dse1.oclAsType(Mode_).enterActions->first().oclAsType(BroadcastEventAction).event->first().name) = dse2.name) then {
		
			
			map MatchingandCoordinationSharedEvents (
						
									inM1Clocks[name =  dse1.name + '_entering']->first().oclAsType(TimeModel::Clock)

			
					,
						
									inM2Clocks[name =  dse2.name + '_makeactive']->first().oclAsType(TimeModel::Clock)

			
			
			);
		} endif;

		};
		};
}endif;
}






mapping MatchingandCoordinationSharedEvents (
				dse1:TimeModel::CCSLModel::ClockExpressionAndRelation::BindableEntity
					,
				dse2:TimeModel::CCSLModel::ClockExpressionAndRelation::BindableEntity
	) :TimeModel::CCSLModel::ClockExpressionAndRelation::Relation {
			
			name := 'MatchingandCoordinationSharedEvents';
					name := name + dse1.name;
					name := name + dse2.name;
	
			var seqAbstract : OrderedSet(Stdlib::Element) := seqOfRelationDeclaration->select(rd | rd.name = "")->first().oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::RelationDeclaration).parameters;
			
			type := seqOfRelationDeclaration->select(rd | rd.name = "")->first();
			
					bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
						bindable := dse1;
						_abstract := seqAbstract->at(1).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					};
					bindings += object TimeModel::CCSLModel::ClockExpressionAndRelation::Binding{
						bindable := dse2;
						_abstract := seqAbstract->at(2).oclAsType(TimeModel::CCSLModel::ClockExpressionAndRelation::AbstractEntity);
					};

end{
			theSubBlock.relations += result;
		}	
			
}


mapping xcapella_coordination2CCSLSubBlock() : TimeModel::CCSLModel::Block {
	theSubBlock := result;
	name:="";
	
			name:= name + getModelPath(inM1.rootObjects()->asSequence()->first().oclAsType(EObject)).substring(getModelPath(inM1.rootObjects()->asSequence()->first().oclAsType(EObject)).lastIndexOf('/')+1, getModelPath(inM1.rootObjects()->asSequence()->first().oclAsType(EObject)).lastIndexOf('.')-1);
	
		if outCCSLModel.objectsOfType(TimeModel::ImportStatement)->asSequence()->select(i | i.importURI = inM1MoCCPath )->isEmpty() then {
		theCCSLSpec.imports+= object TimeModel::ImportStatement{
			importURI := inM1MoCCPath;
			alias := getModelPath(inM1.rootObjects()->asSequence()->first().oclAsType(EObject)).substring(getModelPath(inM1.rootObjects()->asSequence()->first().oclAsType(EObject)).lastIndexOf('/')+1, getModelPath(inM1.rootObjects()->asSequence()->first().oclAsType(EObject)).lastIndexOf('.')-1);
			}; 
		} endif;

			name:= name + getModelPath(inM2.rootObjects()->asSequence()->first().oclAsType(EObject)).substring(getModelPath(inM2.rootObjects()->asSequence()->first().oclAsType(EObject)).lastIndexOf('/')+1, getModelPath(inM2.rootObjects()->asSequence()->first().oclAsType(EObject)).lastIndexOf('.')-1);
	
		if outCCSLModel.objectsOfType(TimeModel::ImportStatement)->asSequence()->select(i | i.importURI = inM2MoCCPath )->isEmpty() then {
		theCCSLSpec.imports+= object TimeModel::ImportStatement{
			importURI := inM2MoCCPath;
			alias := getModelPath(inM2.rootObjects()->asSequence()->first().oclAsType(EObject)).substring(getModelPath(inM2.rootObjects()->asSequence()->first().oclAsType(EObject)).lastIndexOf('/')+1, getModelPath(inM2.rootObjects()->asSequence()->first().oclAsType(EObject)).lastIndexOf('.')-1);
			}; 
		} endif;

	name := name + "sublock"; 
}




	mapping xcapella_coordination2CCSLMainBlock() : TimeModel::CCSLModel::ClockConstraintSystem {
	    theCCSLSpec := result;
	    name := 'xcapella_coordinationCoordination';
	    theMainBlock :=object TimeModel::CCSLModel::Block{
	    	name := "mainBlock";
	    };
	    subBlock += theMainBlock;
	    result.superBlock := theMainBlock;


		imports+= object TimeModel::ImportStatement{
				importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib';
				alias := 'lib_1';	
				}; 
		imports+= object TimeModel::ImportStatement{
				importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib';
				alias := 'lib_2';	
				}; 


			imports+= object TimeModel::ImportStatement{
			importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib';
			alias := 'model_1_1';	
		}; 



			imports+= object TimeModel::ImportStatement{
			importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib';
			alias := 'model_1_2';	
		}; 



				imports+= object TimeModel::ImportStatement{
				importURI := 'platform:/plugin/org.gemoc.sample.smcube.moc.lib/ccsl/SMCubeMoC.ccslLib';
				alias := 'model_1_3';	
		}; 


				imports+= object TimeModel::ImportStatement{
				importURI := 'platform:/plugin/org.gemoc.sample.smcube.moc.lib/ccsl/SMCubeMoCC.moccml';
				alias := 'model_1_4';	
		}; 


			imports+= object TimeModel::ImportStatement{
			importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib';
			alias := 'model_2_1';	
		}; 



			imports+= object TimeModel::ImportStatement{
			importURI := 'platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib';
			alias := 'model_2_2';	
		}; 



				imports+= object TimeModel::ImportStatement{
				importURI := 'platform:/plugin/fr.inria.aoste.dataflowmode.constraint.moccml/mocc/ModeFunctionalChain.moccml';
				alias := 'model_2_3';	
		}; 


}



