/**
 * Copyright (c) PolarSys, 2015. All rights reserved. 
 *
 *	Viewpoint Expression
 *	@author: Sébastien Madelénat
 *	@date: 28/08/15
 *
 */
 
import external "http://www.thalesgroup.com/trt/time/1.0.0" 
 
Data expression.data {
		Class AbstractGuard {
		description: "An AbstractGuard characterizes the condition for a Transition to become runnable. An AbstractGuard whose condition is not valued is always runnable."
		abstract: true

		Operations:
			asString() returns external ecore.EString [1,1] 
			fromString (external ecore.EString [1,1] p_String)
	}
	Class Guard {
		description: "A Guard is an AbstractGuard whose condition (condition) is a BooleanExpression."
		superClass AbstractGuard
		Associations:
			condition contains [1,1] BooleanExpression changeable: true ordered: true unique: true
	}
	Class EventGuard {
		description: "An EventGuard is runnable when is an EventExpression (triggeringEvent) occurs."
		superClass AbstractGuard
		Associations:
			triggeringEvent contains [1,1] EventExpression changeable: true ordered: true unique: true
	}
	Class TemporalGuard {
		description: "An TemporalGuard is an AbstractGuard runnable after a certain delay (afterDuration). It is used for representing timeouts or timed synchronizations for instance."
		superClass AbstractGuard
		Associations:
			afterDuration contains [1,1] DurationExpression
	}
	// regarder si on ne peut pas faire ça en mieux avec des NFP
	
	Class Variable {
		superClass external capellacore.NamedElement
		
		Associations:
			initialValue contains [1,1] external modellingcore.ValueSpecification
			currentValue contains [1,1] external modellingcore.ValueSpecification transient: true
	}
	
	Class Expression {
		superClass external capellacore.NamedElement
		abstract: true

	}
	
	Class BooleanExpression {
		superClass Expression
		abstract: true
		Associations:
			assignee refers [1,1] Variable
	}
	
	Class BooleanUnaryExpression {
		superClass BooleanExpression
		Attributes:
			operator enum BooleanUnaryOperator [0,1] 
		Associations:
			operand refers [1,1] Variable
	}
	
	Class BooleanBinaryExpression {
		superClass BooleanExpression
		Attributes:
			operator enum BooleanBinaryOperator
		Associations:
			operand1 refers [1,1] BooleanExpression
			operand2 refers [1,1] BooleanExpression
	}
	
	Class NumericExpression {
		superClass Expression
		abstract: true
	}
	
	Class NumericUnaryExpression {
		superClass NumericExpression
		Attributes:
			operator enum NumericUnaryOperator [0,1]
		Associations:
			operand refers [1,1] Variable
	}
	Class NumericBinaryExpression {
		superClass NumericExpression
	
		Associations:
			operand1 contains [1,1] NumericExpression
			operand2 contains [1,1] NumericExpression
	}
	
	Class NumericComparisonExpression {
		superClass NumericBinaryExpression, BooleanExpression
		Attributes:
			operator enum NumericComparisonOperator
	}
	
	Class NumericComputationExpression {
		superClass NumericBinaryExpression
		Attributes:
			operator enum NumericComputationOperator
		Associations:
			assignee refers [1,1] Variable
	}
	
	
	Class EventExpression {
		superClass external capellacore.NamedElement
		abstract: true
	}

	Class EventUnaryExpression {
		superClass EventExpression
		Attributes:
			operator enum EventUnaryOperator[0,1]
		Associations:
			operand refers [1,1] external behavior.AbstractEvent
	}
	
	Class EventBinaryExpression {
		superClass EventExpression
		Attributes:
			operator enum EventBinaryOperator
		Associations:
			operand1 contains [1,1] EventExpression
			operand2 contains [1,1] EventExpression
	}
	
	Class DurationExpression {
		superClass external capellacore.NamedElement
		abstract: true
	}
	
	Class DurationUnaryExpression {
		superClass DurationExpression
		Associations:
			operand contains [1,1] external time.Duration
	}
	
	Class DurationBinaryExpression {
		superClass DurationExpression
		Attributes:
			operator enum DurationBinaryOperator
		Associations:
			operand1 contains [1,1] DurationExpression
			operand2 contains [1,1] DurationExpression 
	}

	
	Enumeration BooleanUnaryOperator {
		UNSPECIFIED literal UNSPECIFIED, NOT literal NOT
	}
	Enumeration BooleanBinaryOperator {
		AND literal AND, OR literal OR
	}
	Enumeration NumericUnaryOperator {
		UNSPECIFIED literal UNSPECIFIED, MINUS literal MINUS
	}
	Enumeration NumericComparisonOperator {
		SMALLER literal SMALLER, SMALLER_EQUALS literal SMALLER_EQUALS, EQUALS literal EQUALS, GREATER_EQUALS literal GREATER_EQUALS, GREATER literal GREATER
	}
	Enumeration NumericComputationOperator {
		ADD literal ADD, SUB literal SUB, MUL literal MUL, DIV literal DIV
	}
	Enumeration EventUnaryOperator {
		UNSPECIFIED literal UNSPECIFIED, NOT literal NOT
	}
	Enumeration EventBinaryOperator {
		AND literal AND, OR literal OR
	}
	Enumeration DurationBinaryOperator {
		ADD literal ADD, SUB literal SUB, MUL literal MUL, DIV literal DIV
	}
}