/**
 * Copyright (c) PolarSys, 2015. All rights reserved. 
 *
 *	Viewpoint mode
 *	@author: Sébastien Madelénat
 *	@date: 09/10/15
 *
 */
 
import external "http://www.thalesgroup.com/trt/al/1.0.0"
import external "http://www.thalesgroup.com/trt/time/1.0.0"
import external "http://www.thalesgroup.com/trt/expression/1.0.0" 
 
Data mode.data {
	Class ModeMachine {
		description: "A ModeMachine describes the modes and transitions of (a specific part of) the System. A ModeMachine have a unique starting point (initial) and can run only one Mode (current) at a time (no parallel execution allowed)."
		icon: "StateMachine.gif"
		extends cs.Component
		superClass external capellacore.NamedElement
		Associations:
			ownedModes contains [0,*] AbstractMode changeable: true ordered: true unique: true
			ownedTransitions contains [0,*] Transition changeable: true ordered: true unique: true
			inputEvents refers [0,*] external behavior.AbstractEvent changeable: true ordered: true unique: true
			inputSignals refers [0,*] external information.communication.Signal changeable: true ordered: true unique: true
			outputEvents refers [0,*] external behavior.AbstractEvent changeable: true ordered: true unique: true
			outputSignals refers [0,*] external information.communication.Signal changeable: true ordered: true unique: true
			localClocks contains [0,*] external time.Clock changeable: true ordered: true unique: true
			localVariables contains [0,*] external expression.Variable
			initial refers [1,1] Initial changeable: true ordered: true unique: true
			
	}
	Class AbstractMode {
		description:
		"An AbstractMode is a node in the ModeMachine. It is the source and/or the target of Transitions. An AbstractMode is entered when an incident Transition (incomingTransitions) has transit. An AbractMode is exited when an output Transition (outgoingTransitions) guard become true. An AbstractMode execution is synchronous, i.e. the current task/execution finishes before exiting."
		abstract: true
		Associations:
			outgoingTransitions refers [0,*] Transition changeable: true ordered: true unique: true
			incomingTransitions refers [0,*] Transition changeable: true ordered: true unique: true
	}

	Class Mode_ {
		description:
		"A Mode denotes the running mode of (a specific part of) the System. Example of common modes are \"Nominal Mode\" or \"Fail-safe Mode\". A Mode governs the behavior, thanks to the System's operation phases, by activating (on entry) and deactivating (on exit) of a certain set of consistent Functions (FuncionalChains) of the System (availableFunctionalChains). A Mode can call Actions when enter (enterActions) or exit (exitActions). The Mode execution is represented by the call of Actions after enter and until exit (doActions). The Mode execution is repeated until exit is possible. A Mode behavior can be described by a sub-mode machine (subModeMachine) which replaces the doActions behavior description when used."
		icon: "Mode.gif"
		superClass AbstractMode
		Associations:
			enterActions contains [0,*] external al.Action changeable: true ordered: true unique: true
			doActions contains [0,*] external al.Action changeable: true ordered: true unique: true
			exitActions contains [0,*] external al.Action changeable: true ordered: true unique: true
			availableFunctionalChains refers [0,*] external fa.FunctionalChain changeable: true ordered: true unique: true
			subModeMachine contains [0,1] ModeMachine
	}
	Class ControlNode {
		description:
		"A ControlNode represents the technical nodes used for ordering and orchestrating the Modes coordination."
		superClass AbstractMode
		abstract: true
	}
	Class Initial {
		description: "An Initial node represents the starting point of a ModeMachine."
		icon: "Initial.gif"
		superClass ControlNode
	}
	Class Final {
		description: "A Final node represents the ending point of a ModeMachine. It can call actions on entry following the same rules than a Mode (enterActions)."
		icon: "Final.gif"
		superClass ControlNode
		Associations:
			enterActions contains [0,*] external al.Action changeable: true ordered: true unique: true
	}
//	Class Decision {
//		// attention, on peut faire exactement la même chose avec une TransitionJunction
//		description: "A Decision node is used to steer the ModeMachine execution. The steering criteria are the evaluation of outgoingTransitions Guards."
//		icon: "Decision.gif"
//		superClass ControlNode
//	}
	
	Class TransitionJunction {
		description: "A TransitionJunction represents the boolean conjunction of incomingTransitions and outgoingTransitions. It is used for factorization of complex guard expressions (lighter guards expressions, fewer mistakes, etc.)."
		superClass ControlNode
	}
	Class HistoryNode {
		description: "An HistoryNode represents the historical decision points. It is based on historical data relative to Mode activity. It indicated the historical Mode activity is used to determine the next Mode to be active. It applies only to the ModeMachine it belongs to."
		superClass ControlNode
	}
	Class Transition {
		description: "A Transition characterizes the capability of transition from a source Mode (source) to a target Mode (target). A Transition can occur when its AbstractGuard (ownedGuard) become true. A Transition can also call Actions (actions) in order to execute tasks such as (part of the) System reconfiguration required in Modes Transition. Such Actions execution is synchronous and a time deadline can be specified (timeBudget). When the timeBudget is elapsed and the Transition actions are not finished, the Transition is rollbacked and the (part of the) System source Mode is restarted.  A Transition execution can trigger AbstractEvent (generatedEvents). If multiple Transitions from a common source AbstractMode are true at the same time, only one can be executed. The executed Transition is the one that have the lowest priority value."
		icon: "Transition.gif"
		superClass external capellacore.NamedElement
		Attributes:
			priority type ecore.EInt
		Associations:
			source refers [1,1] AbstractMode changeable: true ordered: true unique: true
			target refers [1,1] AbstractMode changeable: true ordered: true unique: true
			trigger contains [0,1] external expression.EventExpression
			guard contains [0,1] external expression.AbstractGuard changeable: true ordered: true unique: true
			actions contains [0,*] external al.Action
			timeBudget contains [0,1] external expression.DurationExpression
			generatedEvents refers [0,*] external behavior.AbstractEvent changeable: true ordered: true unique: true
	}
}